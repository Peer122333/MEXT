
Full Bridge Control - MEXT Cap Testbench- STM32 - NUCLEO-G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000682c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006a0c  08006a0c  00007a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b1c  08006b1c  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b1c  08006b1c  00007b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b24  08006b24  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b24  08006b24  00007b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b28  08006b28  00007b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006b2c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000006c  08006b98  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006b98  00008324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013837  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002732  00000000  00000000  0001b8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001e008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd5  00000000  00000000  0001f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275dd  00000000  00000000  0001ff85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013627  00000000  00000000  00047562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe40e  00000000  00000000  0005ab89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158f97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  00158fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0015e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080069f4 	.word	0x080069f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080069f4 	.word	0x080069f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Enable_Right>:
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* ====== GPIO SHORTCUTS (ersetze Ports/Pins durch deine Cube-Makros!) ====== */
static inline void Enable_Right(bool on){ HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, on?GPIO_PIN_SET:GPIO_PIN_RESET); }
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2140      	movs	r1, #64	@ 0x40
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <Enable_Right+0x20>)
 80005fe:	f001 facb 	bl	8001b98 <HAL_GPIO_WritePin>
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	48000400 	.word	0x48000400

08000610 <Enable_Left>:
static inline void Enable_Left (bool on){ HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, on?GPIO_PIN_SET:GPIO_PIN_RESET); }
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	461a      	mov	r2, r3
 800061e:	2180      	movs	r1, #128	@ 0x80
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <Enable_Left+0x20>)
 8000622:	f001 fab9 	bl	8001b98 <HAL_GPIO_WritePin>
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	48000800 	.word	0x48000800

08000634 <Drive_Right>:
static inline void Drive_Right (bool on){ HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, on?GPIO_PIN_SET:GPIO_PIN_RESET); }
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	461a      	mov	r2, r3
 8000642:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f001 faa5 	bl	8001b98 <HAL_GPIO_WritePin>
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <Drive_Left>:
static inline void Drive_Left  (bool on){ HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on?GPIO_PIN_SET:GPIO_PIN_RESET); }
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	461a      	mov	r2, r3
 8000664:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066c:	f001 fa94 	bl	8001b98 <HAL_GPIO_WritePin>
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <positive_pulse_actions>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*++++++++++++ Puls Form Helfer ++++++++++++ */
/* Aktionen für Puls 1/2 – hier nur Beispiel, setz was du brauchst */
static inline void positive_pulse_actions(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	// ----- Halbbrücke links High Side aktiv -----
	Drive_Left(true);
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff ffea 	bl	8000656 <Drive_Left>
	Enable_Left(true);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ffc4 	bl	8000610 <Enable_Left>
	// ----- Halbbrücke rechts Low Side aktiv -----
	Drive_Right(false);
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff ffd3 	bl	8000634 <Drive_Right>
    Enable_Right(true);
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff ffac 	bl	80005ec <Enable_Right>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <negative_pulse_actions>:
static inline void negative_pulse_actions(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// ----- Halbbrücke links High Side aktiv -----
	Drive_Left(false);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ffda 	bl	8000656 <Drive_Left>
	Enable_Left(true);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ffb4 	bl	8000610 <Enable_Left>
	// ----- Halbbrücke rechts Low Side aktiv -----
	Drive_Right(true);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ffc3 	bl	8000634 <Drive_Right>
    Enable_Right(true);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff9c 	bl	80005ec <Enable_Right>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <all_off>:

static inline void all_off(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	// alle aus
    Enable_Right(false);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff95 	bl	80005ec <Enable_Right>
    Enable_Left(false);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff ffa4 	bl	8000610 <Enable_Left>
    Drive_Right(false);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff ffb3 	bl	8000634 <Drive_Right>
    Drive_Left(false);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ffc1 	bl	8000656 <Drive_Left>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <tim_by_id>:


static inline TIM_HandleTypeDef* tim_by_id(uint8_t timer)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	return (timer == 2) ? &htim2 : &htim1; // if timer == 2 return &htim2 else return &htim1
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d101      	bne.n	80006ec <tim_by_id+0x14>
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <tim_by_id+0x24>)
 80006ea:	e000      	b.n	80006ee <tim_by_id+0x16>
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <tim_by_id+0x28>)
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200000f0 	.word	0x200000f0
 8000700:	200000a4 	.word	0x200000a4

08000704 <apply_set>:

static void apply_set(uint8_t timer, uint16_t period_field, uint8_t flags)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	460b      	mov	r3, r1
 8000710:	80bb      	strh	r3, [r7, #4]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]

	TIM_HandleTypeDef *ht =  tim_by_id(timer); // Timer Handle ermitteln
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ffdd 	bl	80006d8 <tim_by_id>
 800071e:	60b8      	str	r0, [r7, #8]

	HAL_TIM_Base_Stop(ht); // Timer stopppen für sichere konfiguration
 8000720:	68b8      	ldr	r0, [r7, #8]
 8000722:	f002 fafc 	bl	8002d1e <HAL_TIM_Base_Stop>
	__HAL_TIM_CLEAR_FLAG(ht, TIM_FLAG_UPDATE); // (UIF=)Update Interrupt Flag - Bit löschen
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f06f 0201 	mvn.w	r2, #1
 800072e:	611a      	str	r2, [r3, #16]

	uint32_t ticks = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]

	if (timer == 1){
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d121      	bne.n	800077e <apply_set+0x7a>
        // --- FAST: period_field in µs ---
        uint32_t us = period_field;
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	613b      	str	r3, [r7, #16]
        if (us < T1_US_MIN) us = T1_US_MIN;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2b09      	cmp	r3, #9
 8000742:	d801      	bhi.n	8000748 <apply_set+0x44>
 8000744:	230a      	movs	r3, #10
 8000746:	613b      	str	r3, [r7, #16]
        if (us > T1_US_MAX) us = T1_US_MAX;
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800074e:	d902      	bls.n	8000756 <apply_set+0x52>
 8000750:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000754:	613b      	str	r3, [r7, #16]

        // Tick = 10 µs  -> ticks = us / 10  (runden auf nächste Ganzzahl)
        ticks = (us + 5u) / 10u;            // 10..100 -> 1..10..100
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	3305      	adds	r3, #5
 800075a:	4a28      	ldr	r2, [pc, #160]	@ (80007fc <apply_set+0xf8>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	08db      	lsrs	r3, r3, #3
 8000762:	617b      	str	r3, [r7, #20]
        if (ticks == 0) ticks = 1;          // Schutz
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <apply_set+0x6a>
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]

        Tcfg[timer-1].value = (uint16_t)us;   // READBACK in µs
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3b01      	subs	r3, #1
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	b291      	uxth	r1, r2
 8000776:	4a22      	ldr	r2, [pc, #136]	@ (8000800 <apply_set+0xfc>)
 8000778:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 800077c:	e026      	b.n	80007cc <apply_set+0xc8>
	} else {
		 // --- SLOW: period_field in ms ---
		uint32_t ms = period_field;
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]
		if (ms < T2_MS_MIN) ms = T2_MS_MIN;     // Protokoll: min 1 ms (Timer könnte 0.5 ms)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <apply_set+0x88>
 8000788:	2301      	movs	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
		if (ms > T2_MS_MAX) ms = T2_MS_MAX;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000792:	4293      	cmp	r3, r2
 8000794:	d902      	bls.n	800079c <apply_set+0x98>
 8000796:	f242 7310 	movw	r3, #10000	@ 0x2710
 800079a:	60fb      	str	r3, [r7, #12]

		// Tick = 100 µs -> 1 ms = 10 Ticks
		ticks = ms * 10u;                       // 1..10000 ms -> 10..100000 Ticks
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
		if (ticks < 5u) ticks = 5u;             // Timer-Kapazität: min 0.5 ms (ARR>=4), nur falls 0.5 ms noch gewünscht ist
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d801      	bhi.n	80007b2 <apply_set+0xae>
 80007ae:	2305      	movs	r3, #5
 80007b0:	617b      	str	r3, [r7, #20]
		if (ticks > 100000u) ticks = 100000u;   // 10 s Grenze
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <apply_set+0x100>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d901      	bls.n	80007be <apply_set+0xba>
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <apply_set+0x100>)
 80007bc:	617b      	str	r3, [r7, #20]

		Tcfg[timer-1].value = (uint16_t)ms;    // READBACK in ms
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	b291      	uxth	r1, r2
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <apply_set+0xfc>)
 80007c8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	}

	__HAL_TIM_SET_AUTORELOAD(ht, (ticks - 1u)); // TImer zählt von 0 bis ARR = period - 1 (period-Anzahl an ticks)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	3a01      	subs	r2, #1
 80007d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(ht, 0u);
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24

	Tcfg[timer-1].flags = flags;	// FLAGS (Soft / Hard-Exit)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <apply_set+0xfc>)
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	709a      	strb	r2, [r3, #2]
}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	cccccccd 	.word	0xcccccccd
 8000800:	20000098 	.word	0x20000098
 8000804:	000186a0 	.word	0x000186a0

08000808 <send_readback>:
    HAL_TIM_Base_Stop_IT(ht);					// Interrupt-Timer stoppen
    __HAL_TIM_CLEAR_FLAG(ht, TIM_FLAG_UPDATE);	// UIF-Bit löschen
}

static void send_readback(uint8_t timer)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
    uint8_t tx[5];
    uint16_t p = Tcfg[timer-1].value;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	3b01      	subs	r3, #1
 8000816:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <send_readback+0x60>)
 8000818:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800081c:	81fb      	strh	r3, [r7, #14]
    tx[0] = PREAMBLE;
 800081e:	23ff      	movs	r3, #255	@ 0xff
 8000820:	723b      	strb	r3, [r7, #8]
    tx[1] = CMD_READBACK + (timer == 2 ? 1 : 0);  // 0x40/0x41
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d101      	bne.n	800082c <send_readback+0x24>
 8000828:	2341      	movs	r3, #65	@ 0x41
 800082a:	e000      	b.n	800082e <send_readback+0x26>
 800082c:	2340      	movs	r3, #64	@ 0x40
 800082e:	727b      	strb	r3, [r7, #9]
    tx[2] = (uint8_t)(p & 0xFF);                  // LSB
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	72bb      	strb	r3, [r7, #10]
    tx[3] = (uint8_t)(p >> 8);                    // MSB
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	72fb      	strb	r3, [r7, #11]
    tx[4] = Tcfg[timer-1].flags;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	3b01      	subs	r3, #1
 8000844:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <send_readback+0x60>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, tx, sizeof tx, 100);	// TODO: hier über printf testen
 8000850:	f107 0108 	add.w	r1, r7, #8
 8000854:	2364      	movs	r3, #100	@ 0x64
 8000856:	2205      	movs	r2, #5
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <send_readback+0x64>)
 800085a:	f003 f837 	bl	80038cc <HAL_UART_Transmit>
    // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100); => hierdurch unten, geht UART_Transmit auch über printf, drüber testen
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000098 	.word	0x20000098
 800086c:	2000013c 	.word	0x2000013c

08000870 <seq_start>:



/* =============== API Funktionen =============== */
void seq_start(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    if (g_state != ST_IDLE) return;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <seq_start+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d121      	bne.n	80008c2 <seq_start+0x52>
    g_exit   = EXIT_NONE;
 800087e:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <seq_start+0x5c>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
    g_t1_cnt = 0;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <seq_start+0x60>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]

    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <seq_start+0x64>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <seq_start+0x68>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <seq_start+0x64>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f06f 0201 	mvn.w	r2, #1
 80008a2:	611a      	str	r2, [r3, #16]
    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <seq_start+0x68>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f06f 0201 	mvn.w	r2, #1
 80008ac:	611a      	str	r2, [r3, #16]

    HAL_TIM_Base_Start_IT(&htim1);   // "Fast" – triggert Puls 1 und Puls 2
 80008ae:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <seq_start+0x64>)
 80008b0:	f002 fa5c 	bl	8002d6c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);   // "Slow" – Zyklusende
 80008b4:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <seq_start+0x68>)
 80008b6:	f002 fa59 	bl	8002d6c <HAL_TIM_Base_Start_IT>

    g_state = ST_RUN;
 80008ba:	4b03      	ldr	r3, [pc, #12]	@ (80008c8 <seq_start+0x58>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	e000      	b.n	80008c4 <seq_start+0x54>
    if (g_state != ST_IDLE) return;
 80008c2:	bf00      	nop
}
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000a0 	.word	0x200000a0
 80008cc:	200000a2 	.word	0x200000a2
 80008d0:	200000a1 	.word	0x200000a1
 80008d4:	200000a4 	.word	0x200000a4
 80008d8:	200000f0 	.word	0x200000f0

080008dc <seq_request_soft_stop>:

void seq_request_soft_stop(void) { g_exit = EXIT_SOFT; }   // stoppen nach Puls2 / Zyklusende
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <seq_request_soft_stop+0x14>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	200000a2 	.word	0x200000a2

080008f4 <seq_hard_stop>:
void seq_hard_stop(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim1);
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <seq_hard_stop+0x40>)
 80008fa:	f002 faaf 	bl	8002e5c <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim2);
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <seq_hard_stop+0x44>)
 8000900:	f002 faac 	bl	8002e5c <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <seq_hard_stop+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f06f 0201 	mvn.w	r2, #1
 800090c:	611a      	str	r2, [r3, #16]
    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <seq_hard_stop+0x44>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f06f 0201 	mvn.w	r2, #1
 8000916:	611a      	str	r2, [r3, #16]
    all_off();
 8000918:	f7ff fece 	bl	80006b8 <all_off>
    g_state = ST_IDLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <seq_hard_stop+0x48>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
    g_t1_cnt = 0;
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <seq_hard_stop+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
    g_exit   = EXIT_NONE;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <seq_hard_stop+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000a4 	.word	0x200000a4
 8000938:	200000f0 	.word	0x200000f0
 800093c:	200000a0 	.word	0x200000a0
 8000940:	200000a1 	.word	0x200000a1
 8000944:	200000a2 	.word	0x200000a2

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094e:	f000 fd60 	bl	8001412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000952:	f000 f8bd 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f000 f9f5 	bl	8000d44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800095a:	f000 f9a7 	bl	8000cac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800095e:	f000 f903 	bl	8000b68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000962:	f000 f955 	bl	8000c10 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Diese Funktion empfängt über Interrupt UART Signale aus dem Python Skript
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx, RX_SZ); // Prozessstart
 8000966:	2205      	movs	r2, #5
 8000968:	4949      	ldr	r1, [pc, #292]	@ (8000a90 <main+0x148>)
 800096a:	484a      	ldr	r0, [pc, #296]	@ (8000a94 <main+0x14c>)
 800096c:	f005 f80b 	bl	8005986 <HAL_UARTEx_ReceiveToIdle_IT>


while (1)
{
	if(command_rcv == 1){
 8000970:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <main+0x150>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b01      	cmp	r3, #1
 8000978:	d1fa      	bne.n	8000970 <main+0x28>
		command_rcv = 0;
 800097a:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <main+0x150>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

        const uint8_t  cmd   = rx_buf[1];
 8000980:	4b46      	ldr	r3, [pc, #280]	@ (8000a9c <main+0x154>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	71bb      	strb	r3, [r7, #6]
        const uint8_t  base  = cmd & 0xF0;            // 0x10/0x20/0x30/0x40
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	f023 030f 	bic.w	r3, r3, #15
 800098c:	717b      	strb	r3, [r7, #5]
        const uint8_t  timer = (cmd & 0x01) ? 2 : 1;  // ungerade -> TIM2
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <main+0x54>
 8000998:	2302      	movs	r3, #2
 800099a:	e000      	b.n	800099e <main+0x56>
 800099c:	2301      	movs	r3, #1
 800099e:	713b      	strb	r3, [r7, #4]
        const uint16_t value = (uint16_t)rx_buf[2] | ((uint16_t)rx_buf[3] << 8); // LSB,MSB
 80009a0:	4b3e      	ldr	r3, [pc, #248]	@ (8000a9c <main+0x154>)
 80009a2:	789b      	ldrb	r3, [r3, #2]
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	4b3d      	ldr	r3, [pc, #244]	@ (8000a9c <main+0x154>)
 80009a8:	78db      	ldrb	r3, [r3, #3]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	807b      	strh	r3, [r7, #2]
        const uint8_t  flags  = rx_buf[4];
 80009b6:	4b39      	ldr	r3, [pc, #228]	@ (8000a9c <main+0x154>)
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	707b      	strb	r3, [r7, #1]

        switch (base) {
 80009bc:	797b      	ldrb	r3, [r7, #5]
 80009be:	2b40      	cmp	r3, #64	@ 0x40
 80009c0:	d034      	beq.n	8000a2c <main+0xe4>
 80009c2:	2b40      	cmp	r3, #64	@ 0x40
 80009c4:	dc41      	bgt.n	8000a4a <main+0x102>
 80009c6:	2b30      	cmp	r3, #48	@ 0x30
 80009c8:	d022      	beq.n	8000a10 <main+0xc8>
 80009ca:	2b30      	cmp	r3, #48	@ 0x30
 80009cc:	dc3d      	bgt.n	8000a4a <main+0x102>
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d002      	beq.n	80009d8 <main+0x90>
 80009d2:	2b20      	cmp	r3, #32
 80009d4:	d012      	beq.n	80009fc <main+0xb4>
 80009d6:	e038      	b.n	8000a4a <main+0x102>
        case CMD_SET:      /* 0x10 / 0x11 */
        	// Setzt adressierten Timer:
        	//  - TIM1: interpretiert value als µs (10..1000, Tick=10µs)
			//  - TIM2: interpretiert value als ms  (1..10000, Tick=0.1ms)
			apply_set(timer, value, flags);
 80009d8:	787a      	ldrb	r2, [r7, #1]
 80009da:	8879      	ldrh	r1, [r7, #2]
 80009dc:	793b      	ldrb	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe90 	bl	8000704 <apply_set>
			printf("CMD: SET %s OK (period=%u)\r\n", (timer==1?"T1":"T2"), (unsigned)value);
 80009e4:	793b      	ldrb	r3, [r7, #4]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d101      	bne.n	80009ee <main+0xa6>
 80009ea:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa0 <main+0x158>)
 80009ec:	e000      	b.n	80009f0 <main+0xa8>
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <main+0x15c>)
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	4619      	mov	r1, r3
 80009f4:	482c      	ldr	r0, [pc, #176]	@ (8000aa8 <main+0x160>)
 80009f6:	f005 f927 	bl	8005c48 <iprintf>
			break;
 80009fa:	e02c      	b.n	8000a56 <main+0x10e>

		case CMD_START:    /* 0x20 / 0x21 */
			//alternativ für nur einen Timer => do_start(timer);
			// Anzahl Pulse setzen
			soll_pulse_count = value;
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b2a      	ldr	r3, [pc, #168]	@ (8000aac <main+0x164>)
 8000a02:	701a      	strb	r2, [r3, #0]
			// Start beider Timer + State Machine
			seq_start();
 8000a04:	f7ff ff34 	bl	8000870 <seq_start>
            printf("CMD: START (seq) OK\r\n");
 8000a08:	4829      	ldr	r0, [pc, #164]	@ (8000ab0 <main+0x168>)
 8000a0a:	f005 f985 	bl	8005d18 <puts>
            break;
 8000a0e:	e022      	b.n	8000a56 <main+0x10e>

		case CMD_STOP:     /* 0x30 / 0x31 */
            // Immer SOFT-STOP: am Zyklusende (TIM2-IRQ) in all_off() beenden
		  if (g_exit == EXIT_HARD) { seq_hard_stop(); return; }
 8000a10:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <main+0x16c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d102      	bne.n	8000a20 <main+0xd8>
 8000a1a:	f7ff ff6b 	bl	80008f4 <seq_hard_stop>
 8000a1e:	e031      	b.n	8000a84 <main+0x13c>
            seq_request_soft_stop();
 8000a20:	f7ff ff5c 	bl	80008dc <seq_request_soft_stop>
            printf("CMD: STOP (soft) requested\r\n");
 8000a24:	4824      	ldr	r0, [pc, #144]	@ (8000ab8 <main+0x170>)
 8000a26:	f005 f977 	bl	8005d18 <puts>
            break;
 8000a2a:	e014      	b.n	8000a56 <main+0x10e>

		case CMD_READBACK: /* 0x40 / 0x41 */
            // READBACK spiegelt die gesetzten Einheiten zurück:
            //  - T1: µs
            //  - T2: ms
            send_readback(timer);
 8000a2c:	793b      	ldrb	r3, [r7, #4]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff feea 	bl	8000808 <send_readback>
            printf("CMD: READBACK %s OK\r\n", (timer==1?"T1":"T2"));
 8000a34:	793b      	ldrb	r3, [r7, #4]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d101      	bne.n	8000a3e <main+0xf6>
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <main+0x158>)
 8000a3c:	e000      	b.n	8000a40 <main+0xf8>
 8000a3e:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <main+0x15c>)
 8000a40:	4619      	mov	r1, r3
 8000a42:	481e      	ldr	r0, [pc, #120]	@ (8000abc <main+0x174>)
 8000a44:	f005 f900 	bl	8005c48 <iprintf>
            break;
 8000a48:	e005      	b.n	8000a56 <main+0x10e>

		default:
			printf("Unknown CMD: 0x%02X\r\n", cmd);
 8000a4a:	79bb      	ldrb	r3, [r7, #6]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481c      	ldr	r0, [pc, #112]	@ (8000ac0 <main+0x178>)
 8000a50:	f005 f8fa 	bl	8005c48 <iprintf>
			break;
 8000a54:	bf00      	nop
		}

        printf("RX:");
 8000a56:	481b      	ldr	r0, [pc, #108]	@ (8000ac4 <main+0x17c>)
 8000a58:	f005 f8f6 	bl	8005c48 <iprintf>
        for (uint8_t i = 0; i < RX_SZ; ++i) printf(" %02X", rx_buf[i]);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	e009      	b.n	8000a76 <main+0x12e>
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <main+0x154>)
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4817      	ldr	r0, [pc, #92]	@ (8000ac8 <main+0x180>)
 8000a6c:	f005 f8ec 	bl	8005c48 <iprintf>
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	3301      	adds	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	d9f2      	bls.n	8000a62 <main+0x11a>
        printf("\r\n");
 8000a7c:	4813      	ldr	r0, [pc, #76]	@ (8000acc <main+0x184>)
 8000a7e:	f005 f94b 	bl	8005d18 <puts>
	if(command_rcv == 1){
 8000a82:	e775      	b.n	8000970 <main+0x28>
		  if (g_exit == EXIT_HARD) { seq_hard_stop(); return; }
 8000a84:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000088 	.word	0x20000088
 8000a94:	2000013c 	.word	0x2000013c
 8000a98:	20000096 	.word	0x20000096
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	08006a0c 	.word	0x08006a0c
 8000aa4:	08006a10 	.word	0x08006a10
 8000aa8:	08006a14 	.word	0x08006a14
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	08006a34 	.word	0x08006a34
 8000ab4:	200000a2 	.word	0x200000a2
 8000ab8:	08006a4c 	.word	0x08006a4c
 8000abc:	08006a68 	.word	0x08006a68
 8000ac0:	08006a80 	.word	0x08006a80
 8000ac4:	08006a98 	.word	0x08006a98
 8000ac8:	08006a9c 	.word	0x08006a9c
 8000acc:	08006aa4 	.word	0x08006aa4

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	@ 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	2238      	movs	r2, #56	@ 0x38
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f005 f922 	bl	8005d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f001 f88c 	bl	8001c10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	2340      	movs	r3, #64	@ 0x40
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b12:	2355      	movs	r3, #85	@ 0x55
 8000b14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f926 	bl	8001d78 <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b32:	f000 fa6f 	bl	8001014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fc24 	bl	800239c <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b5a:	f000 fa5b 	bl	8001014 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	@ 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000b88:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <MX_TIM1_Init+0xa4>)
 8000b8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000b8e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8000b92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb2:	4815      	ldr	r0, [pc, #84]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000bb4:	f002 f85c 	bl	8002c70 <HAL_TIM_Base_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000bbe:	f000 fa29 	bl	8001014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480e      	ldr	r0, [pc, #56]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000bd0:	f002 fac2 	bl	8003158 <HAL_TIM_ConfigClockSource>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000bda:	f000 fa1b 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <MX_TIM1_Init+0xa0>)
 8000bf0:	f002 fd40 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bfa:	f000 fa0b 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000a4 	.word	0x200000a4
 8000c0c:	40012c00 	.word	0x40012c00

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c38:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c5a:	f002 f809 	bl	8002c70 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c64:	f000 f9d6 	bl	8001014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4619      	mov	r1, r3
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c76:	f002 fa6f 	bl	8003158 <HAL_TIM_ConfigClockSource>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c80:	f000 f9c8 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_TIM2_Init+0x98>)
 8000c92:	f002 fcef 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c9c:	f000 f9ba 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000f0 	.word	0x200000f0

08000cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cb2:	4a23      	ldr	r2, [pc, #140]	@ (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf4:	4811      	ldr	r0, [pc, #68]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cf6:	f002 fd99 	bl	800382c <HAL_UART_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d00:	f000 f988 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000d08:	f004 fdc1 	bl	800588e <HAL_UARTEx_SetTxFifoThreshold>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d12:	f000 f97f 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4808      	ldr	r0, [pc, #32]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000d1a:	f004 fdf6 	bl	800590a <HAL_UARTEx_SetRxFifoThreshold>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d24:	f000 f976 	bl	8001014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000d2a:	f004 fd77 	bl	800581c <HAL_UARTEx_DisableFifoMode>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d34:	f000 f96e 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000013c 	.word	0x2000013c
 8000d40:	40004400 	.word	0x40004400

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b43      	ldr	r3, [pc, #268]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a42      	ldr	r2, [pc, #264]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b40      	ldr	r3, [pc, #256]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d72:	4b3d      	ldr	r3, [pc, #244]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a3c      	ldr	r2, [pc, #240]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b37      	ldr	r3, [pc, #220]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a36      	ldr	r2, [pc, #216]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b34      	ldr	r3, [pc, #208]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a30      	ldr	r2, [pc, #192]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <MX_GPIO_Init+0x124>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Drive_Left_Pin|Drive_Right_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f000 fee8 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_Left_GPIO_Port, Enable_Left_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	4827      	ldr	r0, [pc, #156]	@ (8000e6c <MX_GPIO_Init+0x128>)
 8000dce:	f000 fee3 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_Right_GPIO_Port, Enable_Right_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	4826      	ldr	r0, [pc, #152]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000dd8:	f000 fede 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC0 PC1 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8000ddc:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <MX_GPIO_Init+0x128>)
 8000df4:	f000 fd4e 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Drive_Left_Pin Drive_Right_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Drive_Left_Pin|Drive_Right_Pin;
 8000df8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e14:	f000 fd3e 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enable_Left_Pin */
  GPIO_InitStruct.Pin = Enable_Left_Pin;
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_Left_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480f      	ldr	r0, [pc, #60]	@ (8000e6c <MX_GPIO_Init+0x128>)
 8000e30:	f000 fd30 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enable_Right_Pin */
  GPIO_InitStruct.Pin = Enable_Right_Pin;
 8000e34:	2340      	movs	r3, #64	@ 0x40
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_Right_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000e4c:	f000 fd22 	bl	8001894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2028      	movs	r0, #40	@ 0x28
 8000e56:	f000 fc28 	bl	80016aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e5a:	2028      	movs	r0, #40	@ 0x28
 8000e5c:	f000 fc3f 	bl	80016de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	@ 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000400 	.word	0x48000400

08000e74 <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 4 */




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART2){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <HAL_UARTEx_RxEventCallback+0x48>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d114      	bne.n	8000eb4 <HAL_UARTEx_RxEventCallback+0x40>
        if (Size == RX_SZ && rx[0] == PREAMBLE) {
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d10c      	bne.n	8000eaa <HAL_UARTEx_RxEventCallback+0x36>
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2bff      	cmp	r3, #255	@ 0xff
 8000e96:	d108      	bne.n	8000eaa <HAL_UARTEx_RxEventCallback+0x36>
    		memcpy(rx_buf, rx, Size); // Daten sichern
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4908      	ldr	r1, [pc, #32]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000e9e:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <HAL_UARTEx_RxEventCallback+0x50>)
 8000ea0:	f004 ff77 	bl	8005d92 <memcpy>
            command_rcv = 1;		  // Kommando erhalten Flag setzen
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_UARTEx_RxEventCallback+0x54>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
        }

		// 2) Optional: Quellpuffer leeren (hilft beim Debugging)
		// memset(rx, 0, RX_SZ);

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx, RX_SZ); // immer wieder neu armen
 8000eaa:	2205      	movs	r2, #5
 8000eac:	4904      	ldr	r1, [pc, #16]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000eae:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <HAL_UARTEx_RxEventCallback+0x58>)
 8000eb0:	f004 fd69 	bl	8005986 <HAL_UARTEx_ReceiveToIdle_IT>

	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	20000088 	.word	0x20000088
 8000ec4:	20000090 	.word	0x20000090
 8000ec8:	20000096 	.word	0x20000096
 8000ecc:	2000013c 	.word	0x2000013c

08000ed0 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000ed8:	1d39      	adds	r1, r7, #4
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2201      	movs	r2, #1
 8000ede:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <__io_putchar+0x20>)
 8000ee0:	f002 fcf4 	bl	80038cc <HAL_UART_Transmit>

  return ch;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000013c 	.word	0x2000013c

08000ef4 <HAL_TIM_PeriodElapsedCallback>:

// Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* ============== TIM1: schnelle Ereignisse im Zyklus ============== */
  if (htim->Instance == TIM1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d127      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x62>
  {
	  if (g_state != ST_RUN) return; // damit das abfängt muss in Start-Sequenz g_state = ST_RUN gesetzt werden
 8000f06:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d168      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0xee>

	  switch (g_t1_cnt)
 8000f10:	4b3a      	ldr	r3, [pc, #232]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d012      	beq.n	8000f40 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	dc63      	bgt.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d006      	beq.n	8000f34 <HAL_TIM_PeriodElapsedCallback+0x40>
			  HAL_TIM_Base_Stop_IT(&htim1);
			  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);

		  default:
			  // ignorieren (TIM1 ist eigentlich schon gestoppt)
			  break;
 8000f26:	e05e      	b.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0xf2>
			  positive_pulse_actions();
 8000f28:	f7ff fba6 	bl	8000678 <positive_pulse_actions>
			  g_t1_cnt = 1;
 8000f2c:	4b33      	ldr	r3, [pc, #204]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
			  break;
 8000f32:	e05b      	b.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xf8>
			  negative_pulse_actions();
 8000f34:	f7ff fbb0 	bl	8000698 <negative_pulse_actions>
			  g_t1_cnt = 2;
 8000f38:	4b30      	ldr	r3, [pc, #192]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	701a      	strb	r2, [r3, #0]
			  break;
 8000f3e:	e055      	b.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xf8>
			  all_off();
 8000f40:	f7ff fbba 	bl	80006b8 <all_off>
			  HAL_TIM_Base_Stop_IT(&htim1);
 8000f44:	482e      	ldr	r0, [pc, #184]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f46:	f001 ff89 	bl	8002e5c <HAL_TIM_Base_Stop_IT>
			  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f06f 0201 	mvn.w	r2, #1
 8000f52:	611a      	str	r2, [r3, #16]
			  break;
 8000f54:	e047      	b.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0xf2>
	  }
  }

  /* ============== TIM2: Zyklusende ============== */
  else if (htim->Instance == TIM2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f5e:	d145      	bne.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xf8>
  {
	  if (g_state != ST_RUN) return;
 8000f60:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d13f      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0xf6>

	  if (soll_pulse_count > 0 && pulse_count >= soll_pulse_count-1){
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00a      	beq.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0x94>
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	db02      	blt.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0x94>
		  g_exit = EXIT_SOFT;
 8000f82:	4b22      	ldr	r3, [pc, #136]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
	  }
	  // Softstop behandeln
	  if (g_exit == EXIT_SOFT) {
 8000f88:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d111      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0xc2>
		  // nur an Zyklusende aussteigen
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000f92:	481f      	ldr	r0, [pc, #124]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f94:	f001 ff62 	bl	8002e5c <HAL_TIM_Base_Stop_IT>
		  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f06f 0201 	mvn.w	r2, #1
 8000fa0:	611a      	str	r2, [r3, #16]
		  g_state = ST_IDLE;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
		  g_t1_cnt = 0;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
		  g_exit = EXIT_NONE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
		  return;
 8000fb4:	e01a      	b.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xf8>
	  }

	  // Weiterlaufen: neuen Zyklus vorbereiten
	  g_t1_cnt = 0;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	  pulse_count++;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000fc6:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
	  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f06f 0201 	mvn.w	r2, #1
 8000fd8:	611a      	str	r2, [r3, #16]
	  HAL_TIM_Base_Start_IT(&htim1);   // nächste Puls-Folge im neuen Zyklus
 8000fda:	4809      	ldr	r0, [pc, #36]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000fdc:	f001 fec6 	bl	8002d6c <HAL_TIM_Base_Start_IT>
 8000fe0:	e004      	b.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xf8>
	  if (g_state != ST_RUN) return; // damit das abfängt muss in Start-Sequenz g_state = ST_RUN gesetzt werden
 8000fe2:	bf00      	nop
 8000fe4:	e002      	b.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xf8>
			  break;
 8000fe6:	bf00      	nop
 8000fe8:	e000      	b.n	8000fec <HAL_TIM_PeriodElapsedCallback+0xf8>
	  if (g_state != ST_RUN) return;
 8000fea:	bf00      	nop
  	  }

  }
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012c00 	.word	0x40012c00
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	200000a1 	.word	0x200000a1
 8001000:	200000a4 	.word	0x200000a4
 8001004:	20000000 	.word	0x20000000
 8001008:	20000095 	.word	0x20000095
 800100c:	200000a2 	.word	0x200000a2
 8001010:	200000f0 	.word	0x200000f0

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <Error_Handler+0x8>

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	@ 0x60
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	@ 0x58
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001056:	f000 fe7f 	bl	8001d58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <HAL_TIM_Base_MspInit+0x78>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d114      	bne.n	80010a4 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <HAL_TIM_Base_MspInit+0x7c>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107e:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001080:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001084:	6613      	str	r3, [r2, #96]	@ 0x60
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2019      	movs	r0, #25
 8001098:	f000 fb07 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800109c:	2019      	movs	r0, #25
 800109e:	f000 fb1e 	bl	80016de <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a2:	e018      	b.n	80010d6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ac:	d113      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_TIM_Base_MspInit+0x7c>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <HAL_TIM_Base_MspInit+0x7c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_TIM_Base_MspInit+0x7c>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	201c      	movs	r0, #28
 80010cc:	f000 faed 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010d0:	201c      	movs	r0, #28
 80010d2:	f000 fb04 	bl	80016de <HAL_NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40012c00 	.word	0x40012c00
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09e      	sub	sp, #120	@ 0x78
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2254      	movs	r2, #84	@ 0x54
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f004 fe0d 	bl	8005d28 <memset>
  if(huart->Instance==USART2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <HAL_UART_MspInit+0xb8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d13e      	bne.n	8001196 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fb55 	bl	80027d4 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001130:	f7ff ff70 	bl	8001014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_UART_MspInit+0xbc>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001138:	4a1a      	ldr	r2, [pc, #104]	@ (80011a4 <HAL_UART_MspInit+0xbc>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_UART_MspInit+0xbc>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_UART_MspInit+0xbc>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <HAL_UART_MspInit+0xbc>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_UART_MspInit+0xbc>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001164:	230c      	movs	r3, #12
 8001166:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001174:	2307      	movs	r3, #7
 8001176:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001182:	f000 fb87 	bl	8001894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2026      	movs	r0, #38	@ 0x26
 800118c:	f000 fa8d 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001190:	2026      	movs	r0, #38	@ 0x26
 8001192:	f000 faa4 	bl	80016de <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001196:	bf00      	nop
 8001198:	3778      	adds	r7, #120	@ 0x78
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40021000 	.word	0x40021000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <NMI_Handler+0x4>

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <MemManage_Handler+0x4>

080011c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <UsageFault_Handler+0x4>

080011d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fe:	f000 f95b 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800120e:	f001 fe54 	bl	8002eba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000a4 	.word	0x200000a4

0800121c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <TIM2_IRQHandler+0x10>)
 8001222:	f001 fe4a 	bl	8002eba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000f0 	.word	0x200000f0

08001230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <USART2_IRQHandler+0x10>)
 8001236:	f002 fbd7 	bl	80039e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000013c 	.word	0x2000013c

08001244 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001248:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800124c:	f000 fcbc 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e00a      	b.n	800127c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001266:	f3af 8000 	nop.w
 800126a:	4601      	mov	r1, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf0      	blt.n	8001266 <_read+0x12>
  }

  return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe11 	bl	8000ed0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x12>
  }
  return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:

int _isatty(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f004 fcea 	bl	8005d38 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20020000 	.word	0x20020000
 8001390:	00000400 	.word	0x00000400
 8001394:	200001d0 	.word	0x200001d0
 8001398:	20000328 	.word	0x20000328

0800139c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013c0:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff ffea 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopForever+0x6>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopForever+0xe>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopForever+0x16>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f004 fca9 	bl	8005d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f2:	f7ff faa9 	bl	8000948 <main>

080013f6 <LoopForever>:

LoopForever:
    b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   r0, =_estack
 80013f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001404:	08006b2c 	.word	0x08006b2c
  ldr r2, =_sbss
 8001408:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800140c:	20000324 	.word	0x20000324

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>

08001412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f939 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f80e 	bl	8001444 <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e001      	b.n	8001438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001434:	f7ff fdf4 	bl	8001020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001438:	79fb      	ldrb	r3, [r7, #7]

}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_InitTick+0x68>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d022      	beq.n	800149e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_InitTick+0x6c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HAL_InitTick+0x68>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001464:	fbb1 f3f3 	udiv	r3, r1, r3
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f944 	bl	80016fa <HAL_SYSTICK_Config>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10f      	bne.n	8001498 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	d809      	bhi.n	8001492 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147e:	2200      	movs	r2, #0
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001486:	f000 f910 	bl	80016aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_InitTick+0x70>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e007      	b.n	80014a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e004      	b.n	80014a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e001      	b.n	80014a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000000c 	.word	0x2000000c
 80014b0:	20000004 	.word	0x20000004
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_IncTick+0x1c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_IncTick+0x20>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a03      	ldr	r2, [pc, #12]	@ (80014d4 <HAL_IncTick+0x1c>)
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	200001d4 	.word	0x200001d4
 80014d8:	2000000c 	.word	0x2000000c

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200001d4 	.word	0x200001d4

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	@ (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff40 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff33 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa4 	bl	8001650 <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d005      	beq.n	8001736 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2204      	movs	r2, #4
 800172e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e037      	b.n	80017a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 020e 	bic.w	r2, r2, #14
 8001744:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001754:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	f003 021f 	and.w	r2, r3, #31
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001782:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00c      	beq.n	80017a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001796:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800179a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d00d      	beq.n	80017f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2204      	movs	r2, #4
 80017e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e047      	b.n	8001888 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020e 	bic.w	r2, r2, #14
 8001806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001822:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001826:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001844:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800185c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001866:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
    }
  }
  return status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018a2:	e15a      	b.n	8001b5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 814c 	beq.w	8001b54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80a6 	beq.w	8001b54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a14:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a20:	4a56      	ldr	r2, [pc, #344]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a4a:	d01f      	beq.n	8001a8c <HAL_GPIO_Init+0x1f8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d019      	beq.n	8001a88 <HAL_GPIO_Init+0x1f4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4b      	ldr	r2, [pc, #300]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00d      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d007      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e00a      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a78:	2306      	movs	r3, #6
 8001a7a:	e008      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9e:	4937      	ldr	r1, [pc, #220]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aac:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad0:	4a30      	ldr	r2, [pc, #192]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001afa:	4a26      	ldr	r2, [pc, #152]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b24:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b4e:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f ae9d 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48001000 	.word	0x48001000
 8001b90:	48001400 	.word	0x48001400
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bde:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f806 	bl	8001bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d141      	bne.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c2a:	d131      	bne.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c2c:	4b47      	ldr	r3, [pc, #284]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c32:	4a46      	ldr	r2, [pc, #280]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3c:	4b43      	ldr	r3, [pc, #268]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c44:	4a41      	ldr	r2, [pc, #260]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c4c:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2232      	movs	r2, #50	@ 0x32
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	4a3f      	ldr	r2, [pc, #252]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	0c9b      	lsrs	r3, r3, #18
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c62:	e002      	b.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6a:	4b38      	ldr	r3, [pc, #224]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c76:	d102      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f2      	bne.n	8001c64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c7e:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c8a:	d158      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e057      	b.n	8001d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c90:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c96:	4a2d      	ldr	r2, [pc, #180]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ca0:	e04d      	b.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca8:	d141      	bne.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001caa:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cb6:	d131      	bne.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cbe:	4a23      	ldr	r2, [pc, #140]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc8:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2232      	movs	r2, #50	@ 0x32
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	0c9b      	lsrs	r3, r3, #18
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cee:	e002      	b.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d02:	d102      	bne.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f2      	bne.n	8001cf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d16:	d112      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e011      	b.n	8001d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d2c:	e007      	b.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	20000004 	.word	0x20000004
 8001d54:	431bde83 	.word	0x431bde83

08001d58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d66:	6093      	str	r3, [r2, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40007000 	.word	0x40007000

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e2fe      	b.n	8002388 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d075      	beq.n	8001e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d96:	4b97      	ldr	r3, [pc, #604]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da0:	4b94      	ldr	r3, [pc, #592]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3e>
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_OscConfig+0x44>
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d10b      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d05b      	beq.n	8001e80 <HAL_RCC_OscConfig+0x108>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d157      	bne.n	8001e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e2d9      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ddc:	d106      	bne.n	8001dec <HAL_RCC_OscConfig+0x74>
 8001dde:	4b85      	ldr	r3, [pc, #532]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a84      	ldr	r2, [pc, #528]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e01d      	b.n	8001e28 <HAL_RCC_OscConfig+0xb0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x98>
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7b      	ldr	r2, [pc, #492]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0xb0>
 8001e10:	4b78      	ldr	r3, [pc, #480]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a77      	ldr	r2, [pc, #476]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a74      	ldr	r2, [pc, #464]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb54 	bl	80014dc <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fb50 	bl	80014dc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	@ 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e29e      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0xc0>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb40 	bl	80014dc <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fb3c 	bl	80014dc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	@ 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e28a      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e72:	4b60      	ldr	r3, [pc, #384]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0xe8>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d075      	beq.n	8001f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	4b59      	ldr	r3, [pc, #356]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	4b56      	ldr	r3, [pc, #344]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_OscConfig+0x136>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x13c>
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d11f      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x154>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e25d      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	4946      	ldr	r1, [pc, #280]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ee0:	4b45      	ldr	r3, [pc, #276]	@ (8001ff8 <HAL_RCC_OscConfig+0x280>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff faad 	bl	8001444 <HAL_InitTick>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d043      	beq.n	8001f78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e249      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fae8 	bl	80014dc <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fae4 	bl	80014dc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e232      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	492d      	ldr	r1, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
 8001f42:	e01a      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff fac4 	bl	80014dc <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f58:	f7ff fac0 	bl	80014dc <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e20e      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x1e0>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d041      	beq.n	800200a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f94:	4a17      	ldr	r2, [pc, #92]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fa9d 	bl	80014dc <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fa99 	bl	80014dc <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1e7      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ef      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x22e>
 8001fc6:	e020      	b.n	800200a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fce:	4a09      	ldr	r2, [pc, #36]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fa80 	bl	80014dc <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fde:	e00d      	b.n	8001ffc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fa7c 	bl	80014dc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d906      	bls.n	8001ffc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1ca      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ea      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80a6 	beq.w	8002164 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201c:	4b84      	ldr	r3, [pc, #528]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x2b4>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x2b6>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b7f      	ldr	r3, [pc, #508]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	4a7e      	ldr	r2, [pc, #504]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6593      	str	r3, [r2, #88]	@ 0x58
 800203e:	4b7c      	ldr	r3, [pc, #496]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204e:	4b79      	ldr	r3, [pc, #484]	@ (8002234 <HAL_RCC_OscConfig+0x4bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d118      	bne.n	800208c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800205a:	4b76      	ldr	r3, [pc, #472]	@ (8002234 <HAL_RCC_OscConfig+0x4bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a75      	ldr	r2, [pc, #468]	@ (8002234 <HAL_RCC_OscConfig+0x4bc>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7ff fa39 	bl	80014dc <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7ff fa35 	bl	80014dc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e183      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002080:	4b6c      	ldr	r3, [pc, #432]	@ (8002234 <HAL_RCC_OscConfig+0x4bc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d108      	bne.n	80020a6 <HAL_RCC_OscConfig+0x32e>
 8002094:	4b66      	ldr	r3, [pc, #408]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	4a65      	ldr	r2, [pc, #404]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020a4:	e024      	b.n	80020f0 <HAL_RCC_OscConfig+0x378>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d110      	bne.n	80020d0 <HAL_RCC_OscConfig+0x358>
 80020ae:	4b60      	ldr	r3, [pc, #384]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020be:	4b5c      	ldr	r3, [pc, #368]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_OscConfig+0x378>
 80020d0:	4b57      	ldr	r3, [pc, #348]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	4a56      	ldr	r2, [pc, #344]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d016      	beq.n	8002126 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f9f0 	bl	80014dc <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff f9ec 	bl	80014dc <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e138      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	4b46      	ldr	r3, [pc, #280]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ed      	beq.n	8002100 <HAL_RCC_OscConfig+0x388>
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7ff f9d9 	bl	80014dc <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7ff f9d5 	bl	80014dc <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e121      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	4b3a      	ldr	r3, [pc, #232]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ed      	bne.n	800212e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	4a34      	ldr	r2, [pc, #208]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002162:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d03c      	beq.n	80021ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800217e:	4a2c      	ldr	r2, [pc, #176]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7ff f9a8 	bl	80014dc <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002190:	f7ff f9a4 	bl	80014dc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0f2      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021a2:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80021a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ef      	beq.n	8002190 <HAL_RCC_OscConfig+0x418>
 80021b0:	e01b      	b.n	80021ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80021b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff f98b 	bl	80014dc <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ca:	f7ff f987 	bl	80014dc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0d5      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80021de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ef      	bne.n	80021ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80c9 	beq.w	8002386 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	f000 8083 	beq.w	8002308 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d15e      	bne.n	80022c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <HAL_RCC_OscConfig+0x4b8>)
 8002210:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7ff f961 	bl	80014dc <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	e00c      	b.n	8002238 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff f95d 	bl	80014dc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d905      	bls.n	8002238 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0ab      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002238:	4b55      	ldr	r3, [pc, #340]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ec      	bne.n	800221e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002244:	4b52      	ldr	r3, [pc, #328]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	4b52      	ldr	r3, [pc, #328]	@ (8002394 <HAL_RCC_OscConfig+0x61c>)
 800224a:	4013      	ands	r3, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6a11      	ldr	r1, [r2, #32]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002254:	3a01      	subs	r2, #1
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800225e:	0212      	lsls	r2, r2, #8
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002266:	0852      	lsrs	r2, r2, #1
 8002268:	3a01      	subs	r2, #1
 800226a:	0552      	lsls	r2, r2, #21
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002272:	0852      	lsrs	r2, r2, #1
 8002274:	3a01      	subs	r2, #1
 8002276:	0652      	lsls	r2, r2, #25
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800227e:	06d2      	lsls	r2, r2, #27
 8002280:	430a      	orrs	r2, r1
 8002282:	4943      	ldr	r1, [pc, #268]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 8002284:	4313      	orrs	r3, r2
 8002286:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a40      	ldr	r2, [pc, #256]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002294:	4b3e      	ldr	r3, [pc, #248]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a3d      	ldr	r2, [pc, #244]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff f91c 	bl	80014dc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff f918 	bl	80014dc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e066      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x530>
 80022c6:	e05e      	b.n	8002386 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c8:	4b31      	ldr	r3, [pc, #196]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a30      	ldr	r2, [pc, #192]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 80022ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff f902 	bl	80014dc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7ff f8fe 	bl	80014dc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04c      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ee:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	4924      	ldr	r1, [pc, #144]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_RCC_OscConfig+0x620>)
 8002302:	4013      	ands	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
 8002306:	e03e      	b.n	8002386 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e039      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002314:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <HAL_RCC_OscConfig+0x618>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0203 	and.w	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d12c      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	3b01      	subs	r3, #1
 8002334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d123      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d11b      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d113      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d109      	bne.n	8002382 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	3b01      	subs	r3, #1
 800237c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	019f800c 	.word	0x019f800c
 8002398:	feeefffc 	.word	0xfeeefffc

0800239c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e11e      	b.n	80025f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b91      	ldr	r3, [pc, #580]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d910      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 020f 	bic.w	r2, r3, #15
 80023ca:	498c      	ldr	r1, [pc, #560]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b8a      	ldr	r3, [pc, #552]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e106      	b.n	80025f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d073      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d129      	bne.n	800244c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f8:	4b81      	ldr	r3, [pc, #516]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0f4      	b.n	80025f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002408:	f000 f99e 	bl	8002748 <RCC_GetSysClockFreqFromPLLSource>
 800240c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4a7c      	ldr	r2, [pc, #496]	@ (8002604 <HAL_RCC_ClockConfig+0x268>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d93f      	bls.n	8002496 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002416:	4b7a      	ldr	r3, [pc, #488]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800242a:	2b00      	cmp	r3, #0
 800242c:	d033      	beq.n	8002496 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002432:	2b00      	cmp	r3, #0
 8002434:	d12f      	bne.n	8002496 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002436:	4b72      	ldr	r3, [pc, #456]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800243e:	4a70      	ldr	r2, [pc, #448]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002444:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e024      	b.n	8002496 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d107      	bne.n	8002464 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002454:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0c6      	b.n	80025f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002464:	4b66      	ldr	r3, [pc, #408]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0be      	b.n	80025f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002474:	f000 f8ce 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8002478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4a61      	ldr	r2, [pc, #388]	@ (8002604 <HAL_RCC_ClockConfig+0x268>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d909      	bls.n	8002496 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002482:	4b5f      	ldr	r3, [pc, #380]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800248a:	4a5d      	ldr	r2, [pc, #372]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 800248c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002490:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b5a      	ldr	r3, [pc, #360]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4957      	ldr	r1, [pc, #348]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7ff f818 	bl	80014dc <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7ff f814 	bl	80014dc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e095      	b.n	80025f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d023      	beq.n	800252c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b43      	ldr	r3, [pc, #268]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a42      	ldr	r2, [pc, #264]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002508:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002510:	4a3b      	ldr	r2, [pc, #236]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002516:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4936      	ldr	r1, [pc, #216]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
 800252a:	e008      	b.n	800253e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b80      	cmp	r3, #128	@ 0x80
 8002530:	d105      	bne.n	800253e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002532:	4b33      	ldr	r3, [pc, #204]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4a32      	ldr	r2, [pc, #200]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002538:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800253c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800253e:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d21d      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254c:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 020f 	bic.w	r2, r3, #15
 8002554:	4929      	ldr	r1, [pc, #164]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800255c:	f7fe ffbe 	bl	80014dc <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe ffba 	bl	80014dc <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e03b      	b.n	80025f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_RCC_ClockConfig+0x260>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d1ed      	bne.n	8002564 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4917      	ldr	r1, [pc, #92]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b2:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490f      	ldr	r1, [pc, #60]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025c6:	f000 f825 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <HAL_RCC_ClockConfig+0x264>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490c      	ldr	r1, [pc, #48]	@ (8002608 <HAL_RCC_ClockConfig+0x26c>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <HAL_RCC_ClockConfig+0x270>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_RCC_ClockConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe ff2a 	bl	8001444 <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40022000 	.word	0x40022000
 8002600:	40021000 	.word	0x40021000
 8002604:	04c4b400 	.word	0x04c4b400
 8002608:	08006aa8 	.word	0x08006aa8
 800260c:	20000004 	.word	0x20000004
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800261a:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d102      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002626:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e047      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d102      	bne.n	800263e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002638:	4b26      	ldr	r3, [pc, #152]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e03e      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800263e:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d136      	bne.n	80026b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3301      	adds	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d10c      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002668:	4a1a      	ldr	r2, [pc, #104]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	4a16      	ldr	r2, [pc, #88]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002672:	68d2      	ldr	r2, [r2, #12]
 8002674:	0a12      	lsrs	r2, r2, #8
 8002676:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
      break;
 8002680:	e00c      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002682:	4a13      	ldr	r2, [pc, #76]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	4a10      	ldr	r2, [pc, #64]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	0a12      	lsrs	r2, r2, #8
 8002690:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
      break;
 800269a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0e5b      	lsrs	r3, r3, #25
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	e001      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026bc:	693b      	ldr	r3, [r7, #16]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	016e3600 	.word	0x016e3600

080026d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4904      	ldr	r1, [pc, #16]	@ (8002718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	08006ab8 	.word	0x08006ab8

0800271c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002720:	f7ff ffda 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0adb      	lsrs	r3, r3, #11
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08006ab8 	.word	0x08006ab8

08002748 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002758:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3301      	adds	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d10c      	bne.n	8002786 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800276c:	4a17      	ldr	r2, [pc, #92]	@ (80027cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002776:	68d2      	ldr	r2, [r2, #12]
 8002778:	0a12      	lsrs	r2, r2, #8
 800277a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
    break;
 8002784:	e00c      	b.n	80027a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4a0e      	ldr	r2, [pc, #56]	@ (80027c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002790:	68d2      	ldr	r2, [r2, #12]
 8002792:	0a12      	lsrs	r2, r2, #8
 8002794:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    break;
 800279e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0e5b      	lsrs	r3, r3, #25
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	3301      	adds	r3, #1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027ba:	687b      	ldr	r3, [r7, #4]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40021000 	.word	0x40021000
 80027cc:	016e3600 	.word	0x016e3600
 80027d0:	00f42400 	.word	0x00f42400

080027d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027dc:	2300      	movs	r3, #0
 80027de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e0:	2300      	movs	r3, #0
 80027e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8098 	beq.w	8002922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b43      	ldr	r3, [pc, #268]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10d      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	4b40      	ldr	r3, [pc, #256]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	4a3f      	ldr	r2, [pc, #252]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6593      	str	r3, [r2, #88]	@ 0x58
 800280e:	4b3d      	ldr	r3, [pc, #244]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800281e:	4b3a      	ldr	r3, [pc, #232]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a39      	ldr	r2, [pc, #228]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002828:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800282a:	f7fe fe57 	bl	80014dc <HAL_GetTick>
 800282e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002830:	e009      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002832:	f7fe fe53 	bl	80014dc <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d902      	bls.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	74fb      	strb	r3, [r7, #19]
        break;
 8002844:	e005      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002846:	4b30      	ldr	r3, [pc, #192]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0ef      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d159      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002858:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002862:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01e      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	429a      	cmp	r2, r3
 8002872:	d019      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002874:	4b23      	ldr	r3, [pc, #140]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	4a1f      	ldr	r2, [pc, #124]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002890:	4b1c      	ldr	r3, [pc, #112]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002896:	4a1b      	ldr	r2, [pc, #108]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028a0:	4a18      	ldr	r2, [pc, #96]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fe13 	bl	80014dc <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b8:	e00b      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fe0f 	bl	80014dc <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d902      	bls.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	74fb      	strb	r3, [r7, #19]
            break;
 80028d0:	e006      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ec      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f4:	4903      	ldr	r1, [pc, #12]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028fc:	e008      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	74bb      	strb	r3, [r7, #18]
 8002902:	e005      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002910:	7c7b      	ldrb	r3, [r7, #17]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d105      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4ba7      	ldr	r3, [pc, #668]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	4aa6      	ldr	r2, [pc, #664]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002920:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800292e:	4ba1      	ldr	r3, [pc, #644]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	f023 0203 	bic.w	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	499d      	ldr	r1, [pc, #628]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002950:	4b98      	ldr	r3, [pc, #608]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f023 020c 	bic.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4995      	ldr	r1, [pc, #596]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002972:	4b90      	ldr	r3, [pc, #576]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	498c      	ldr	r1, [pc, #560]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002994:	4b87      	ldr	r3, [pc, #540]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	4984      	ldr	r1, [pc, #528]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029b6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	497b      	ldr	r1, [pc, #492]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029d8:	4b76      	ldr	r3, [pc, #472]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4973      	ldr	r1, [pc, #460]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fa:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	496a      	ldr	r1, [pc, #424]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a1c:	4b65      	ldr	r3, [pc, #404]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4962      	ldr	r1, [pc, #392]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	4959      	ldr	r1, [pc, #356]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a60:	4b54      	ldr	r3, [pc, #336]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	4951      	ldr	r1, [pc, #324]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a82:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a90:	4948      	ldr	r1, [pc, #288]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d015      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa4:	4b43      	ldr	r3, [pc, #268]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4940      	ldr	r1, [pc, #256]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ace:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d015      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002adc:	4b35      	ldr	r3, [pc, #212]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aea:	4932      	ldr	r1, [pc, #200]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002afa:	d105      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002afc:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b06:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	4924      	ldr	r1, [pc, #144]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b34:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5a:	4916      	ldr	r1, [pc, #88]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d019      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	4908      	ldr	r1, [pc, #32]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b03      	ldr	r3, [pc, #12]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a02      	ldr	r2, [pc, #8]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
 8002bb0:	e002      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bc4:	4b29      	ldr	r3, [pc, #164]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	4926      	ldr	r1, [pc, #152]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002be4:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a20      	ldr	r2, [pc, #128]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0a:	4918      	ldr	r1, [pc, #96]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c1c:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c34:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	490a      	ldr	r1, [pc, #40]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c52:	d105      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e049      	b.n	8002d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe f9e6 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 fb90 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_TIM_Base_Stop+0x38>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a1a      	ldr	r2, [r3, #32]
 8002d3c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_TIM_Base_Stop+0x38>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e054      	b.n	8002e2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a26      	ldr	r2, [pc, #152]	@ (8002e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d022      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dae:	d01d      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d018      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	@ (8002e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00e      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e4c <HAL_TIM_Base_Start_IT+0xe0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <HAL_TIM_Base_Start_IT+0xe4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x80>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e54 <HAL_TIM_Base_Start_IT+0xe8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d115      	bne.n	8002e18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_TIM_Base_Start_IT+0xec>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d015      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0xbe>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e04:	d011      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e008      	b.n	8002e2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e000      	b.n	8002e2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40000c00 	.word	0x40000c00
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	40014000 	.word	0x40014000
 8002e54:	40015000 	.word	0x40015000
 8002e58:	00010007 	.word	0x00010007

08002e5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10f      	bne.n	8002ea4 <HAL_TIM_Base_Stop_IT+0x48>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_Base_Stop_IT+0x48>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01b      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0202 	mvn.w	r2, #2
 8002eee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa47 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002f0a:	e005      	b.n	8002f18 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa39 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fa4a 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01b      	beq.n	8002f6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f06f 0204 	mvn.w	r2, #4
 8002f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fa21 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002f56:	e005      	b.n	8002f64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fa13 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa24 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01b      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f06f 0208 	mvn.w	r2, #8
 8002f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f9fb 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002fa2:	e005      	b.n	8002fb0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f9ed 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9fe 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01b      	beq.n	8003002 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0210 	mvn.w	r2, #16
 8002fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f9d5 	bl	8003398 <HAL_TIM_IC_CaptureCallback>
 8002fee:	e005      	b.n	8002ffc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f9c7 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9d8 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00c      	beq.n	8003026 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0201 	mvn.w	r2, #1
 800301e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fd ff67 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fbb0 	bl	80037b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fba8 	bl	80037c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f992 	bl	80033c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0220 	mvn.w	r2, #32
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fb70 	bl	80037a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00c      	beq.n	80030e4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fb7c 	bl	80037dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fb74 	bl	80037f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fb6c 	bl	8003804 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fb64 	bl	8003818 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_TIM_ConfigClockSource+0x1c>
 8003170:	2302      	movs	r3, #2
 8003172:	e0f6      	b.n	8003362 <HAL_TIM_ConfigClockSource+0x20a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003192:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800319e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a6f      	ldr	r2, [pc, #444]	@ (800336c <HAL_TIM_ConfigClockSource+0x214>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	f000 80c1 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 80031b4:	4a6d      	ldr	r2, [pc, #436]	@ (800336c <HAL_TIM_ConfigClockSource+0x214>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	f200 80c6 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 80031bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003370 <HAL_TIM_ConfigClockSource+0x218>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	f000 80b9 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 80031c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_TIM_ConfigClockSource+0x218>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	f200 80be 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 80031cc:	4a69      	ldr	r2, [pc, #420]	@ (8003374 <HAL_TIM_ConfigClockSource+0x21c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	f000 80b1 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 80031d4:	4a67      	ldr	r2, [pc, #412]	@ (8003374 <HAL_TIM_ConfigClockSource+0x21c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f200 80b6 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 80031dc:	4a66      	ldr	r2, [pc, #408]	@ (8003378 <HAL_TIM_ConfigClockSource+0x220>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	f000 80a9 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 80031e4:	4a64      	ldr	r2, [pc, #400]	@ (8003378 <HAL_TIM_ConfigClockSource+0x220>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	f200 80ae 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 80031ec:	4a63      	ldr	r2, [pc, #396]	@ (800337c <HAL_TIM_ConfigClockSource+0x224>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f000 80a1 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 80031f4:	4a61      	ldr	r2, [pc, #388]	@ (800337c <HAL_TIM_ConfigClockSource+0x224>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	f200 80a6 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 80031fc:	4a60      	ldr	r2, [pc, #384]	@ (8003380 <HAL_TIM_ConfigClockSource+0x228>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	f000 8099 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 8003204:	4a5e      	ldr	r2, [pc, #376]	@ (8003380 <HAL_TIM_ConfigClockSource+0x228>)
 8003206:	4293      	cmp	r3, r2
 8003208:	f200 809e 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 800320c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003210:	f000 8091 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 8003214:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003218:	f200 8096 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 800321c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003220:	f000 8089 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 8003224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003228:	f200 808e 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003230:	d03e      	beq.n	80032b0 <HAL_TIM_ConfigClockSource+0x158>
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003236:	f200 8087 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323e:	f000 8086 	beq.w	800334e <HAL_TIM_ConfigClockSource+0x1f6>
 8003242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003246:	d87f      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 8003248:	2b70      	cmp	r3, #112	@ 0x70
 800324a:	d01a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x12a>
 800324c:	2b70      	cmp	r3, #112	@ 0x70
 800324e:	d87b      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 8003250:	2b60      	cmp	r3, #96	@ 0x60
 8003252:	d050      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x19e>
 8003254:	2b60      	cmp	r3, #96	@ 0x60
 8003256:	d877      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 8003258:	2b50      	cmp	r3, #80	@ 0x50
 800325a:	d03c      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x17e>
 800325c:	2b50      	cmp	r3, #80	@ 0x50
 800325e:	d873      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 8003260:	2b40      	cmp	r3, #64	@ 0x40
 8003262:	d058      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x1be>
 8003264:	2b40      	cmp	r3, #64	@ 0x40
 8003266:	d86f      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 8003268:	2b30      	cmp	r3, #48	@ 0x30
 800326a:	d064      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 800326c:	2b30      	cmp	r3, #48	@ 0x30
 800326e:	d86b      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 8003270:	2b20      	cmp	r3, #32
 8003272:	d060      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 8003274:	2b20      	cmp	r3, #32
 8003276:	d867      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 800327c:	2b10      	cmp	r3, #16
 800327e:	d05a      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x1de>
 8003280:	e062      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	f000 f9cf 	bl	8003634 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	609a      	str	r2, [r3, #8]
      break;
 80032ae:	e04f      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	f000 f9b8 	bl	8003634 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032d2:	609a      	str	r2, [r3, #8]
      break;
 80032d4:	e03c      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e2:	461a      	mov	r2, r3
 80032e4:	f000 f92a 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2150      	movs	r1, #80	@ 0x50
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f983 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 80032f4:	e02c      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003302:	461a      	mov	r2, r3
 8003304:	f000 f949 	bl	800359a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2160      	movs	r1, #96	@ 0x60
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f973 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 8003314:	e01c      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003322:	461a      	mov	r2, r3
 8003324:	f000 f90a 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2140      	movs	r1, #64	@ 0x40
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f963 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 8003334:	e00c      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f000 f95a 	bl	80035fa <TIM_ITRx_SetConfig>
      break;
 8003346:	e003      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      break;
 800334c:	e000      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800334e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	00100070 	.word	0x00100070
 8003370:	00100060 	.word	0x00100060
 8003374:	00100050 	.word	0x00100050
 8003378:	00100040 	.word	0x00100040
 800337c:	00100030 	.word	0x00100030
 8003380:	00100020 	.word	0x00100020

08003384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003518 <TIM_Base_SetConfig+0x144>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d017      	beq.n	800341c <TIM_Base_SetConfig+0x48>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f2:	d013      	beq.n	800341c <TIM_Base_SetConfig+0x48>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a49      	ldr	r2, [pc, #292]	@ (800351c <TIM_Base_SetConfig+0x148>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00f      	beq.n	800341c <TIM_Base_SetConfig+0x48>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a48      	ldr	r2, [pc, #288]	@ (8003520 <TIM_Base_SetConfig+0x14c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00b      	beq.n	800341c <TIM_Base_SetConfig+0x48>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a47      	ldr	r2, [pc, #284]	@ (8003524 <TIM_Base_SetConfig+0x150>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d007      	beq.n	800341c <TIM_Base_SetConfig+0x48>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a46      	ldr	r2, [pc, #280]	@ (8003528 <TIM_Base_SetConfig+0x154>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_Base_SetConfig+0x48>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a45      	ldr	r2, [pc, #276]	@ (800352c <TIM_Base_SetConfig+0x158>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d108      	bne.n	800342e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a39      	ldr	r2, [pc, #228]	@ (8003518 <TIM_Base_SetConfig+0x144>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d023      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343c:	d01f      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a36      	ldr	r2, [pc, #216]	@ (800351c <TIM_Base_SetConfig+0x148>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01b      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a35      	ldr	r2, [pc, #212]	@ (8003520 <TIM_Base_SetConfig+0x14c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d017      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a34      	ldr	r2, [pc, #208]	@ (8003524 <TIM_Base_SetConfig+0x150>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a33      	ldr	r2, [pc, #204]	@ (8003528 <TIM_Base_SetConfig+0x154>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00f      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a33      	ldr	r2, [pc, #204]	@ (8003530 <TIM_Base_SetConfig+0x15c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00b      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a32      	ldr	r2, [pc, #200]	@ (8003534 <TIM_Base_SetConfig+0x160>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a31      	ldr	r2, [pc, #196]	@ (8003538 <TIM_Base_SetConfig+0x164>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <TIM_Base_SetConfig+0xaa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2c      	ldr	r2, [pc, #176]	@ (800352c <TIM_Base_SetConfig+0x158>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d108      	bne.n	8003490 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a18      	ldr	r2, [pc, #96]	@ (8003518 <TIM_Base_SetConfig+0x144>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <TIM_Base_SetConfig+0x110>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a1a      	ldr	r2, [pc, #104]	@ (8003528 <TIM_Base_SetConfig+0x154>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x110>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003530 <TIM_Base_SetConfig+0x15c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x110>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a19      	ldr	r2, [pc, #100]	@ (8003534 <TIM_Base_SetConfig+0x160>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x110>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a18      	ldr	r2, [pc, #96]	@ (8003538 <TIM_Base_SetConfig+0x164>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x110>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a13      	ldr	r2, [pc, #76]	@ (800352c <TIM_Base_SetConfig+0x158>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f023 0201 	bic.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	611a      	str	r2, [r3, #16]
  }
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40000c00 	.word	0x40000c00
 8003528:	40013400 	.word	0x40013400
 800352c:	40015000 	.word	0x40015000
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800

0800353c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0201 	bic.w	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 030a 	bic.w	r3, r3, #10
 8003578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359a:	b480      	push	{r7}
 800359c:	b087      	sub	sp, #28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 0210 	bic.w	r2, r3, #16
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	031b      	lsls	r3, r3, #12
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 0307 	orr.w	r3, r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800364e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	431a      	orrs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e074      	b.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a34      	ldr	r2, [pc, #208]	@ (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a33      	ldr	r2, [pc, #204]	@ (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80036d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80036e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a21      	ldr	r2, [pc, #132]	@ (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370c:	d01d      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1d      	ldr	r2, [pc, #116]	@ (8003794 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a15      	ldr	r2, [pc, #84]	@ (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10c      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	4313      	orrs	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40013400 	.word	0x40013400
 800378c:	40015000 	.word	0x40015000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40014000 	.word	0x40014000

080037a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e042      	b.n	80038c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd fc49 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2224      	movs	r2, #36	@ 0x24
 800385a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 ff12 	bl	80046a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fc13 	bl	80040a8 <UART_SetConfig>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e01b      	b.n	80038c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800389a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 ff91 	bl	80047e4 <UART_CheckIdleState>
 80038c2:	4603      	mov	r3, r0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d17b      	bne.n	80039de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_UART_Transmit+0x26>
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e074      	b.n	80039e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	@ 0x21
 8003902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003906:	f7fd fde9 	bl	80014dc <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003924:	d108      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e003      	b.n	8003940 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003940:	e030      	b.n	80039a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	@ 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fff3 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e03d      	b.n	80039e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003978:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	3302      	adds	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e007      	b.n	8003992 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1c8      	bne.n	8003942 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2200      	movs	r2, #0
 80039b8:	2140      	movs	r1, #64	@ 0x40
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 ffbc 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e006      	b.n	80039e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b0ba      	sub	sp, #232	@ 0xe8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003a12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003a16:	4013      	ands	r3, r2
 8003a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11b      	bne.n	8003a5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8300 	beq.w	8004052 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
      }
      return;
 8003a5a:	e2fa      	b.n	8004052 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8123 	beq.w	8003cac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca0 <HAL_UART_IRQHandler+0x2b8>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003a76:	4b8b      	ldr	r3, [pc, #556]	@ (8003ca4 <HAL_UART_IRQHandler+0x2bc>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8116 	beq.w	8003cac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d011      	beq.n	8003ab0 <HAL_UART_IRQHandler+0xc8>
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d011      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xf8>
 8003abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2202      	movs	r2, #2
 8003ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d011      	beq.n	8003b10 <HAL_UART_IRQHandler+0x128>
 8003aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2204      	movs	r2, #4
 8003afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b06:	f043 0202 	orr.w	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003b28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca0 <HAL_UART_IRQHandler+0x2b8>)
 8003b2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b42:	f043 0208 	orr.w	r2, r3, #8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_UART_IRQHandler+0x196>
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00c      	beq.n	8003b7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8266 	beq.w	8004056 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd2:	2b40      	cmp	r3, #64	@ 0x40
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d054      	beq.n	8003c8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 f838 	bl	8004c58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d146      	bne.n	8003c84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1d9      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d017      	beq.n	8003c7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c52:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <HAL_UART_IRQHandler+0x2c0>)
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fdb1 	bl	80017c4 <HAL_DMA_Abort_IT>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d019      	beq.n	8003c9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003c76:	4610      	mov	r0, r2
 8003c78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7a:	e00f      	b.n	8003c9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fa09 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c82:	e00b      	b.n	8003c9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fa05 	bl	8004094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8a:	e007      	b.n	8003c9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fa01 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003c9a:	e1dc      	b.n	8004056 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	bf00      	nop
    return;
 8003c9e:	e1da      	b.n	8004056 <HAL_UART_IRQHandler+0x66e>
 8003ca0:	10000001 	.word	0x10000001
 8003ca4:	04000120 	.word	0x04000120
 8003ca8:	08004d25 	.word	0x08004d25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f040 8170 	bne.w	8003f96 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8169 	beq.w	8003f96 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8162 	beq.w	8003f96 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	f040 80d8 	bne.w	8003e9a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80af 	beq.w	8003e60 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f080 80a7 	bcs.w	8003e60 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 8087 	bne.w	8003e3e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1da      	bne.n	8003d30 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003da2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003da6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e1      	bne.n	8003d7a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003de0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e3      	bne.n	8003db6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e0c:	f023 0310 	bic.w	r3, r3, #16
 8003e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e4      	bne.n	8003dfc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fd fc6a 	bl	8001712 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fd f80b 	bl	8000e74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003e5e:	e0fc      	b.n	800405a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	f040 80f5 	bne.w	800405a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	f040 80eb 	bne.w	800405a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fc ffee 	bl	8000e74 <HAL_UARTEx_RxEventCallback>
      return;
 8003e98:	e0df      	b.n	800405a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80d1 	beq.w	800405e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80cc 	beq.w	800405e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e4      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3308      	adds	r3, #8
 8003f02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f24:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e1      	bne.n	8003efc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f023 0310 	bic.w	r3, r3, #16
 8003f60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e4      	bne.n	8003f4c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc ff70 	bl	8000e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f94:	e063      	b.n	800405e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x5d8>
 8003fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003fb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f001 fc11 	bl	80057e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fbe:	e051      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d014      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d03a      	beq.n	8004062 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
    }
    return;
 8003ff4:	e035      	b.n	8004062 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_UART_IRQHandler+0x62e>
 8004002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fe9a 	bl	8004d48 <UART_EndTransmit_IT>
    return;
 8004014:	e026      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_UART_IRQHandler+0x64e>
 8004022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004026:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 fbea 	bl	8005808 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004034:	e016      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <HAL_UART_IRQHandler+0x67c>
 8004042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004046:	2b00      	cmp	r3, #0
 8004048:	da0c      	bge.n	8004064 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f001 fbd2 	bl	80057f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004050:	e008      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
      return;
 8004052:	bf00      	nop
 8004054:	e006      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
    return;
 8004056:	bf00      	nop
 8004058:	e004      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
      return;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
      return;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_UART_IRQHandler+0x67c>
    return;
 8004062:	bf00      	nop
  }
}
 8004064:	37e8      	adds	r7, #232	@ 0xe8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b08c      	sub	sp, #48	@ 0x30
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4baa      	ldr	r3, [pc, #680]	@ (8004380 <UART_SetConfig+0x2d8>)
 80040d8:	4013      	ands	r3, r2
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a9f      	ldr	r2, [pc, #636]	@ (8004384 <UART_SetConfig+0x2dc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004110:	4313      	orrs	r3, r2
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800411e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004128:	430b      	orrs	r3, r1
 800412a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	f023 010f 	bic.w	r1, r3, #15
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a90      	ldr	r2, [pc, #576]	@ (8004388 <UART_SetConfig+0x2e0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d125      	bne.n	8004198 <UART_SetConfig+0xf0>
 800414c:	4b8f      	ldr	r3, [pc, #572]	@ (800438c <UART_SetConfig+0x2e4>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b03      	cmp	r3, #3
 8004158:	d81a      	bhi.n	8004190 <UART_SetConfig+0xe8>
 800415a:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <UART_SetConfig+0xb8>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	08004181 	.word	0x08004181
 8004168:	08004179 	.word	0x08004179
 800416c:	08004189 	.word	0x08004189
 8004170:	2301      	movs	r3, #1
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004176:	e116      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417e:	e112      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004186:	e10e      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418e:	e10a      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004196:	e106      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a7c      	ldr	r2, [pc, #496]	@ (8004390 <UART_SetConfig+0x2e8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d138      	bne.n	8004214 <UART_SetConfig+0x16c>
 80041a2:	4b7a      	ldr	r3, [pc, #488]	@ (800438c <UART_SetConfig+0x2e4>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d82d      	bhi.n	800420c <UART_SetConfig+0x164>
 80041b0:	a201      	add	r2, pc, #4	@ (adr r2, 80041b8 <UART_SetConfig+0x110>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	0800420d 	.word	0x0800420d
 80041c0:	0800420d 	.word	0x0800420d
 80041c4:	0800420d 	.word	0x0800420d
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	0800420d 	.word	0x0800420d
 80041d0:	0800420d 	.word	0x0800420d
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	0800420d 	.word	0x0800420d
 80041e0:	0800420d 	.word	0x0800420d
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004205 	.word	0x08004205
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041f2:	e0d8      	b.n	80043a6 <UART_SetConfig+0x2fe>
 80041f4:	2302      	movs	r3, #2
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041fa:	e0d4      	b.n	80043a6 <UART_SetConfig+0x2fe>
 80041fc:	2304      	movs	r3, #4
 80041fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004202:	e0d0      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004204:	2308      	movs	r3, #8
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800420a:	e0cc      	b.n	80043a6 <UART_SetConfig+0x2fe>
 800420c:	2310      	movs	r3, #16
 800420e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004212:	e0c8      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a5e      	ldr	r2, [pc, #376]	@ (8004394 <UART_SetConfig+0x2ec>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d125      	bne.n	800426a <UART_SetConfig+0x1c2>
 800421e:	4b5b      	ldr	r3, [pc, #364]	@ (800438c <UART_SetConfig+0x2e4>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004224:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004228:	2b30      	cmp	r3, #48	@ 0x30
 800422a:	d016      	beq.n	800425a <UART_SetConfig+0x1b2>
 800422c:	2b30      	cmp	r3, #48	@ 0x30
 800422e:	d818      	bhi.n	8004262 <UART_SetConfig+0x1ba>
 8004230:	2b20      	cmp	r3, #32
 8004232:	d00a      	beq.n	800424a <UART_SetConfig+0x1a2>
 8004234:	2b20      	cmp	r3, #32
 8004236:	d814      	bhi.n	8004262 <UART_SetConfig+0x1ba>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <UART_SetConfig+0x19a>
 800423c:	2b10      	cmp	r3, #16
 800423e:	d008      	beq.n	8004252 <UART_SetConfig+0x1aa>
 8004240:	e00f      	b.n	8004262 <UART_SetConfig+0x1ba>
 8004242:	2300      	movs	r3, #0
 8004244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004248:	e0ad      	b.n	80043a6 <UART_SetConfig+0x2fe>
 800424a:	2302      	movs	r3, #2
 800424c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004250:	e0a9      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004252:	2304      	movs	r3, #4
 8004254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004258:	e0a5      	b.n	80043a6 <UART_SetConfig+0x2fe>
 800425a:	2308      	movs	r3, #8
 800425c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004260:	e0a1      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004262:	2310      	movs	r3, #16
 8004264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004268:	e09d      	b.n	80043a6 <UART_SetConfig+0x2fe>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a4a      	ldr	r2, [pc, #296]	@ (8004398 <UART_SetConfig+0x2f0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d125      	bne.n	80042c0 <UART_SetConfig+0x218>
 8004274:	4b45      	ldr	r3, [pc, #276]	@ (800438c <UART_SetConfig+0x2e4>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800427e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004280:	d016      	beq.n	80042b0 <UART_SetConfig+0x208>
 8004282:	2bc0      	cmp	r3, #192	@ 0xc0
 8004284:	d818      	bhi.n	80042b8 <UART_SetConfig+0x210>
 8004286:	2b80      	cmp	r3, #128	@ 0x80
 8004288:	d00a      	beq.n	80042a0 <UART_SetConfig+0x1f8>
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d814      	bhi.n	80042b8 <UART_SetConfig+0x210>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <UART_SetConfig+0x1f0>
 8004292:	2b40      	cmp	r3, #64	@ 0x40
 8004294:	d008      	beq.n	80042a8 <UART_SetConfig+0x200>
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x210>
 8004298:	2300      	movs	r3, #0
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800429e:	e082      	b.n	80043a6 <UART_SetConfig+0x2fe>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a6:	e07e      	b.n	80043a6 <UART_SetConfig+0x2fe>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ae:	e07a      	b.n	80043a6 <UART_SetConfig+0x2fe>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042b6:	e076      	b.n	80043a6 <UART_SetConfig+0x2fe>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042be:	e072      	b.n	80043a6 <UART_SetConfig+0x2fe>
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a35      	ldr	r2, [pc, #212]	@ (800439c <UART_SetConfig+0x2f4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d12a      	bne.n	8004320 <UART_SetConfig+0x278>
 80042ca:	4b30      	ldr	r3, [pc, #192]	@ (800438c <UART_SetConfig+0x2e4>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042d8:	d01a      	beq.n	8004310 <UART_SetConfig+0x268>
 80042da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042de:	d81b      	bhi.n	8004318 <UART_SetConfig+0x270>
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e4:	d00c      	beq.n	8004300 <UART_SetConfig+0x258>
 80042e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ea:	d815      	bhi.n	8004318 <UART_SetConfig+0x270>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <UART_SetConfig+0x250>
 80042f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f4:	d008      	beq.n	8004308 <UART_SetConfig+0x260>
 80042f6:	e00f      	b.n	8004318 <UART_SetConfig+0x270>
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fe:	e052      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004300:	2302      	movs	r3, #2
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004306:	e04e      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004308:	2304      	movs	r3, #4
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800430e:	e04a      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004310:	2308      	movs	r3, #8
 8004312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004316:	e046      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004318:	2310      	movs	r3, #16
 800431a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800431e:	e042      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a17      	ldr	r2, [pc, #92]	@ (8004384 <UART_SetConfig+0x2dc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d13a      	bne.n	80043a0 <UART_SetConfig+0x2f8>
 800432a:	4b18      	ldr	r3, [pc, #96]	@ (800438c <UART_SetConfig+0x2e4>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004338:	d01a      	beq.n	8004370 <UART_SetConfig+0x2c8>
 800433a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800433e:	d81b      	bhi.n	8004378 <UART_SetConfig+0x2d0>
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004344:	d00c      	beq.n	8004360 <UART_SetConfig+0x2b8>
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800434a:	d815      	bhi.n	8004378 <UART_SetConfig+0x2d0>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <UART_SetConfig+0x2b0>
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004354:	d008      	beq.n	8004368 <UART_SetConfig+0x2c0>
 8004356:	e00f      	b.n	8004378 <UART_SetConfig+0x2d0>
 8004358:	2300      	movs	r3, #0
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435e:	e022      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004360:	2302      	movs	r3, #2
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004366:	e01e      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436e:	e01a      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004376:	e016      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437e:	e012      	b.n	80043a6 <UART_SetConfig+0x2fe>
 8004380:	cfff69f3 	.word	0xcfff69f3
 8004384:	40008000 	.word	0x40008000
 8004388:	40013800 	.word	0x40013800
 800438c:	40021000 	.word	0x40021000
 8004390:	40004400 	.word	0x40004400
 8004394:	40004800 	.word	0x40004800
 8004398:	40004c00 	.word	0x40004c00
 800439c:	40005000 	.word	0x40005000
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4aae      	ldr	r2, [pc, #696]	@ (8004664 <UART_SetConfig+0x5bc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	f040 8097 	bne.w	80044e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d823      	bhi.n	8004402 <UART_SetConfig+0x35a>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <UART_SetConfig+0x318>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	08004403 	.word	0x08004403
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	08004403 	.word	0x08004403
 80043d0:	080043f3 	.word	0x080043f3
 80043d4:	08004403 	.word	0x08004403
 80043d8:	08004403 	.word	0x08004403
 80043dc:	08004403 	.word	0x08004403
 80043e0:	080043fb 	.word	0x080043fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7fe f984 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 80043e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043ea:	e010      	b.n	800440e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004668 <UART_SetConfig+0x5c0>)
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043f0:	e00d      	b.n	800440e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f2:	f7fe f90f 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80043f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043f8:	e009      	b.n	800440e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004400:	e005      	b.n	800440e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800440c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8130 	beq.w	8004676 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	4a94      	ldr	r2, [pc, #592]	@ (800466c <UART_SetConfig+0x5c4>)
 800441c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004420:	461a      	mov	r2, r3
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	fbb3 f3f2 	udiv	r3, r3, r2
 8004428:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	429a      	cmp	r2, r3
 8004438:	d305      	bcc.n	8004446 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800444c:	e113      	b.n	8004676 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	2200      	movs	r2, #0
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	60fa      	str	r2, [r7, #12]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	4a84      	ldr	r2, [pc, #528]	@ (800466c <UART_SetConfig+0x5c4>)
 800445c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004460:	b29b      	uxth	r3, r3
 8004462:	2200      	movs	r2, #0
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800446c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004470:	f7fb ff26 	bl	80002c0 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	020b      	lsls	r3, r1, #8
 8004486:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800448a:	0202      	lsls	r2, r0, #8
 800448c:	6979      	ldr	r1, [r7, #20]
 800448e:	6849      	ldr	r1, [r1, #4]
 8004490:	0849      	lsrs	r1, r1, #1
 8004492:	2000      	movs	r0, #0
 8004494:	460c      	mov	r4, r1
 8004496:	4605      	mov	r5, r0
 8004498:	eb12 0804 	adds.w	r8, r2, r4
 800449c:	eb43 0905 	adc.w	r9, r3, r5
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	469a      	mov	sl, r3
 80044a8:	4693      	mov	fp, r2
 80044aa:	4652      	mov	r2, sl
 80044ac:	465b      	mov	r3, fp
 80044ae:	4640      	mov	r0, r8
 80044b0:	4649      	mov	r1, r9
 80044b2:	f7fb ff05 	bl	80002c0 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4613      	mov	r3, r2
 80044bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c4:	d308      	bcc.n	80044d8 <UART_SetConfig+0x430>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044cc:	d204      	bcs.n	80044d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e0ce      	b.n	8004676 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044de:	e0ca      	b.n	8004676 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e8:	d166      	bne.n	80045b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80044ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d827      	bhi.n	8004542 <UART_SetConfig+0x49a>
 80044f2:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <UART_SetConfig+0x450>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	08004525 	.word	0x08004525
 8004500:	0800452d 	.word	0x0800452d
 8004504:	08004543 	.word	0x08004543
 8004508:	08004533 	.word	0x08004533
 800450c:	08004543 	.word	0x08004543
 8004510:	08004543 	.word	0x08004543
 8004514:	08004543 	.word	0x08004543
 8004518:	0800453b 	.word	0x0800453b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe f8e8 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004522:	e014      	b.n	800454e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004524:	f7fe f8fa 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 8004528:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800452a:	e010      	b.n	800454e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800452c:	4b4e      	ldr	r3, [pc, #312]	@ (8004668 <UART_SetConfig+0x5c0>)
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004530:	e00d      	b.n	800454e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe f86f 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8004536:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004538:	e009      	b.n	800454e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004540:	e005      	b.n	800454e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800454c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8090 	beq.w	8004676 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	4a44      	ldr	r2, [pc, #272]	@ (800466c <UART_SetConfig+0x5c4>)
 800455c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004560:	461a      	mov	r2, r3
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	fbb3 f3f2 	udiv	r3, r3, r2
 8004568:	005a      	lsls	r2, r3, #1
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	441a      	add	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	2b0f      	cmp	r3, #15
 8004580:	d916      	bls.n	80045b0 <UART_SetConfig+0x508>
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004588:	d212      	bcs.n	80045b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f023 030f 	bic.w	r3, r3, #15
 8004592:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	b29b      	uxth	r3, r3
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	b29a      	uxth	r2, r3
 80045a0:	8bfb      	ldrh	r3, [r7, #30]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	8bfa      	ldrh	r2, [r7, #30]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e062      	b.n	8004676 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045b6:	e05e      	b.n	8004676 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d828      	bhi.n	8004612 <UART_SetConfig+0x56a>
 80045c0:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <UART_SetConfig+0x520>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	08004613 	.word	0x08004613
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004613 	.word	0x08004613
 80045e0:	08004613 	.word	0x08004613
 80045e4:	08004613 	.word	0x08004613
 80045e8:	0800460b 	.word	0x0800460b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7fe f880 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045f2:	e014      	b.n	800461e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7fe f892 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 80045f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045fa:	e010      	b.n	800461e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004668 <UART_SetConfig+0x5c0>)
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004600:	e00d      	b.n	800461e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004602:	f7fe f807 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8004606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004608:	e009      	b.n	800461e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004610:	e005      	b.n	800461e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800461c:	bf00      	nop
    }

    if (pclk != 0U)
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	d028      	beq.n	8004676 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	4a10      	ldr	r2, [pc, #64]	@ (800466c <UART_SetConfig+0x5c4>)
 800462a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800462e:	461a      	mov	r2, r3
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	fbb3 f2f2 	udiv	r2, r3, r2
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	441a      	add	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d910      	bls.n	8004670 <UART_SetConfig+0x5c8>
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d20c      	bcs.n	8004670 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	b29a      	uxth	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	e009      	b.n	8004676 <UART_SetConfig+0x5ce>
 8004662:	bf00      	nop
 8004664:	40008000 	.word	0x40008000
 8004668:	00f42400 	.word	0x00f42400
 800466c:	08006ac0 	.word	0x08006ac0
      }
      else
      {
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2201      	movs	r2, #1
 800467a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2201      	movs	r2, #1
 8004682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2200      	movs	r2, #0
 8004690:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004692:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004696:	4618      	mov	r0, r3
 8004698:	3730      	adds	r7, #48	@ 0x30
 800469a:	46bd      	mov	sp, r7
 800469c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01a      	beq.n	80047b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800479e:	d10a      	bne.n	80047b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b098      	sub	sp, #96	@ 0x60
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f4:	f7fc fe72 	bl	80014dc <HAL_GetTick>
 80047f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b08      	cmp	r3, #8
 8004806:	d12f      	bne.n	8004868 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f88e 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d022      	beq.n	8004868 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004836:	653b      	str	r3, [r7, #80]	@ 0x50
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004840:	647b      	str	r3, [r7, #68]	@ 0x44
 8004842:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800484e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e063      	b.n	8004930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d149      	bne.n	800490a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004876:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487e:	2200      	movs	r2, #0
 8004880:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f857 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d03c      	beq.n	800490a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	623b      	str	r3, [r7, #32]
   return(result);
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80048b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e6      	bne.n	8004890 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3308      	adds	r3, #8
 80048c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048e2:	61fa      	str	r2, [r7, #28]
 80048e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	69b9      	ldr	r1, [r7, #24]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	617b      	str	r3, [r7, #20]
   return(result);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e5      	bne.n	80048c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e012      	b.n	8004930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3758      	adds	r7, #88	@ 0x58
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004948:	e04f      	b.n	80049ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004950:	d04b      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fc fdc3 	bl	80014dc <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <UART_WaitOnFlagUntilTimeout+0x30>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e04e      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d037      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b80      	cmp	r3, #128	@ 0x80
 800497e:	d034      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b40      	cmp	r3, #64	@ 0x40
 8004984:	d031      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b08      	cmp	r3, #8
 8004992:	d110      	bne.n	80049b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2208      	movs	r2, #8
 800499a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f95b 	bl	8004c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2208      	movs	r2, #8
 80049a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e029      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c4:	d111      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f941 	bl	8004c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e00f      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	bf0c      	ite	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	2300      	movne	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d0a0      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b0a3      	sub	sp, #140	@ 0x8c
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a46:	d10e      	bne.n	8004a66 <UART_Start_Receive_IT+0x52>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <UART_Start_Receive_IT+0x48>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a5a:	e02d      	b.n	8004ab8 <UART_Start_Receive_IT+0xa4>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	22ff      	movs	r2, #255	@ 0xff
 8004a60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a64:	e028      	b.n	8004ab8 <UART_Start_Receive_IT+0xa4>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10d      	bne.n	8004a8a <UART_Start_Receive_IT+0x76>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <UART_Start_Receive_IT+0x6c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	22ff      	movs	r2, #255	@ 0xff
 8004a7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a7e:	e01b      	b.n	8004ab8 <UART_Start_Receive_IT+0xa4>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	227f      	movs	r2, #127	@ 0x7f
 8004a84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a88:	e016      	b.n	8004ab8 <UART_Start_Receive_IT+0xa4>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a92:	d10d      	bne.n	8004ab0 <UART_Start_Receive_IT+0x9c>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <UART_Start_Receive_IT+0x92>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	227f      	movs	r2, #127	@ 0x7f
 8004aa0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004aa4:	e008      	b.n	8004ab8 <UART_Start_Receive_IT+0xa4>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	223f      	movs	r2, #63	@ 0x3f
 8004aaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004aae:	e003      	b.n	8004ab8 <UART_Start_Receive_IT+0xa4>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2222      	movs	r2, #34	@ 0x22
 8004ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004ad8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004aec:	673a      	str	r2, [r7, #112]	@ 0x70
 8004aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004af2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004afa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e3      	bne.n	8004ac8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b08:	d14f      	bne.n	8004baa <UART_Start_Receive_IT+0x196>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d349      	bcc.n	8004baa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1e:	d107      	bne.n	8004b30 <UART_Start_Receive_IT+0x11c>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a47      	ldr	r2, [pc, #284]	@ (8004c48 <UART_Start_Receive_IT+0x234>)
 8004b2c:	675a      	str	r2, [r3, #116]	@ 0x74
 8004b2e:	e002      	b.n	8004b36 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a46      	ldr	r2, [pc, #280]	@ (8004c4c <UART_Start_Receive_IT+0x238>)
 8004b34:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01a      	beq.n	8004b74 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b62:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e4      	bne.n	8004b3e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b94:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_Start_Receive_IT+0x160>
 8004ba8:	e046      	b.n	8004c38 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb2:	d107      	bne.n	8004bc4 <UART_Start_Receive_IT+0x1b0>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	@ (8004c50 <UART_Start_Receive_IT+0x23c>)
 8004bc0:	675a      	str	r2, [r3, #116]	@ 0x74
 8004bc2:	e002      	b.n	8004bca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a23      	ldr	r2, [pc, #140]	@ (8004c54 <UART_Start_Receive_IT+0x240>)
 8004bc8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d019      	beq.n	8004c06 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004be6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_Start_Receive_IT+0x1be>
 8004c04:	e018      	b.n	8004c38 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	613b      	str	r3, [r7, #16]
   return(result);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f043 0320 	orr.w	r3, r3, #32
 8004c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	6a3a      	ldr	r2, [r7, #32]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	378c      	adds	r7, #140	@ 0x8c
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	08005475 	.word	0x08005475
 8004c4c:	08005111 	.word	0x08005111
 8004c50:	08004f59 	.word	0x08004f59
 8004c54:	08004da1 	.word	0x08004da1

08004c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b095      	sub	sp, #84	@ 0x54
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e3      	bne.n	8004c92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d118      	bne.n	8004d04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f023 0310 	bic.w	r3, r3, #16
 8004ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6979      	ldr	r1, [r7, #20]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e6      	bne.n	8004cd2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d18:	bf00      	nop
 8004d1a:	3754      	adds	r7, #84	@ 0x54
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff f9aa 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e6      	bne.n	8004d50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff f96b 	bl	800406c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d96:	bf00      	nop
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b09c      	sub	sp, #112	@ 0x70
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004dae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004db8:	2b22      	cmp	r3, #34	@ 0x22
 8004dba:	f040 80be 	bne.w	8004f3a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dcc:	b2d9      	uxtb	r1, r3
 8004dce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd8:	400a      	ands	r2, r1
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f040 80a1 	bne.w	8004f4a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a33      	ldr	r2, [pc, #204]	@ (8004f54 <UART_RxISR_8BIT+0x1b4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01f      	beq.n	8004ecc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e6      	bne.n	8004e9a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d12e      	bne.n	8004f32 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0310 	bic.w	r3, r3, #16
 8004eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	617b      	str	r3, [r7, #20]
   return(result);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e6      	bne.n	8004eda <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d103      	bne.n	8004f22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2210      	movs	r2, #16
 8004f20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fb ffa2 	bl	8000e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f30:	e00b      	b.n	8004f4a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff f8a4 	bl	8004080 <HAL_UART_RxCpltCallback>
}
 8004f38:	e007      	b.n	8004f4a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0208 	orr.w	r2, r2, #8
 8004f48:	619a      	str	r2, [r3, #24]
}
 8004f4a:	bf00      	nop
 8004f4c:	3770      	adds	r7, #112	@ 0x70
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40008000 	.word	0x40008000

08004f58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b09c      	sub	sp, #112	@ 0x70
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004f66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f70:	2b22      	cmp	r3, #34	@ 0x22
 8004f72:	f040 80be 	bne.w	80050f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f84:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004f8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	1c9a      	adds	r2, r3, #2
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 80a1 	bne.w	8005102 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fde:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fe0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fe4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e6      	bne.n	8004fc0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	663b      	str	r3, [r7, #96]	@ 0x60
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3308      	adds	r3, #8
 8005010:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005012:	643a      	str	r2, [r7, #64]	@ 0x40
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005018:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a33      	ldr	r2, [pc, #204]	@ (800510c <UART_RxISR_16BIT+0x1b4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d01f      	beq.n	8005084 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005072:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d12e      	bne.n	80050ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f023 0310 	bic.w	r3, r3, #16
 80050a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6979      	ldr	r1, [r7, #20]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	613b      	str	r3, [r7, #16]
   return(result);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e6      	bne.n	8005092 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d103      	bne.n	80050da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2210      	movs	r2, #16
 80050d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fb fec6 	bl	8000e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050e8:	e00b      	b.n	8005102 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fe ffc8 	bl	8004080 <HAL_UART_RxCpltCallback>
}
 80050f0:	e007      	b.n	8005102 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0208 	orr.w	r2, r2, #8
 8005100:	619a      	str	r2, [r3, #24]
}
 8005102:	bf00      	nop
 8005104:	3770      	adds	r7, #112	@ 0x70
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40008000 	.word	0x40008000

08005110 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b0ac      	sub	sp, #176	@ 0xb0
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800511e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005146:	2b22      	cmp	r3, #34	@ 0x22
 8005148:	f040 8183 	bne.w	8005452 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005152:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005156:	e126      	b.n	80053a6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005162:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005166:	b2d9      	uxtb	r1, r3
 8005168:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800516c:	b2da      	uxtb	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005172:	400a      	ands	r2, r1
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800519e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d053      	beq.n	8005252 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d011      	beq.n	80051da <UART_RxISR_8BIT_FIFOEN+0xca>
 80051b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2201      	movs	r2, #1
 80051c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d011      	beq.n	800520a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80051e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2202      	movs	r2, #2
 80051f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005200:	f043 0204 	orr.w	r2, r3, #4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800520a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d011      	beq.n	800523a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2204      	movs	r2, #4
 8005228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005230:	f043 0202 	orr.w	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005240:	2b00      	cmp	r3, #0
 8005242:	d006      	beq.n	8005252 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fe ff25 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 80a3 	bne.w	80053a6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800526e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005282:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005284:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005288:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005290:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e4      	bne.n	8005260 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80052a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052be:	66ba      	str	r2, [r7, #104]	@ 0x68
 80052c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80052c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80052cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e1      	bne.n	8005296 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a60      	ldr	r2, [pc, #384]	@ (800546c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d021      	beq.n	8005334 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01a      	beq.n	8005334 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800530c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005320:	657b      	str	r3, [r7, #84]	@ 0x54
 8005322:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005326:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800532e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e4      	bne.n	80052fe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d130      	bne.n	800539e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005352:	f023 0310 	bic.w	r3, r3, #16
 8005356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005364:	643b      	str	r3, [r7, #64]	@ 0x40
 8005366:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800536a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e4      	bne.n	8005342 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b10      	cmp	r3, #16
 8005384:	d103      	bne.n	800538e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2210      	movs	r2, #16
 800538c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fb fd6c 	bl	8000e74 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800539c:	e00e      	b.n	80053bc <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fe fe6e 	bl	8004080 <HAL_UART_RxCpltCallback>
        break;
 80053a4:	e00a      	b.n	80053bc <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053a6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d006      	beq.n	80053bc <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80053ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f47f aece 	bne.w	8005158 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053c2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80053c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d049      	beq.n	8005462 <UART_RxISR_8BIT_FIFOEN+0x352>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80053d4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80053d8:	429a      	cmp	r2, r3
 80053da:	d242      	bcs.n	8005462 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e3      	bne.n	80053dc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a16      	ldr	r2, [pc, #88]	@ (8005470 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005418:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60bb      	str	r3, [r7, #8]
   return(result);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f043 0320 	orr.w	r3, r3, #32
 800542e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	613b      	str	r3, [r7, #16]
   return(result);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e4      	bne.n	800541a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005450:	e007      	b.n	8005462 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0208 	orr.w	r2, r2, #8
 8005460:	619a      	str	r2, [r3, #24]
}
 8005462:	bf00      	nop
 8005464:	37b0      	adds	r7, #176	@ 0xb0
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40008000 	.word	0x40008000
 8005470:	08004da1 	.word	0x08004da1

08005474 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b0ae      	sub	sp, #184	@ 0xb8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005482:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054aa:	2b22      	cmp	r3, #34	@ 0x22
 80054ac:	f040 8187 	bne.w	80057be <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80054b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054ba:	e12a      	b.n	8005712 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80054ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80054d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80054d6:	4013      	ands	r3, r2
 80054d8:	b29a      	uxth	r2, r3
 80054da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e4:	1c9a      	adds	r2, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b00      	cmp	r3, #0
 8005510:	d053      	beq.n	80055ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <UART_RxISR_16BIT_FIFOEN+0xce>
 800551e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005538:	f043 0201 	orr.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d011      	beq.n	8005572 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800554e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2202      	movs	r2, #2
 8005560:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005568:	f043 0204 	orr.w	r2, r3, #4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d011      	beq.n	80055a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800557e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2204      	movs	r2, #4
 8005590:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005598:	f043 0202 	orr.w	r2, r3, #2
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fe fd71 	bl	8004094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f040 80a5 	bne.w	8005712 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e2      	bne.n	80055c8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800562a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800562c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005630:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e1      	bne.n	8005602 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a60      	ldr	r2, [pc, #384]	@ (80057d8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d021      	beq.n	80056a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01a      	beq.n	80056a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800567a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800567e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800568c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800568e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005692:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800569a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e4      	bne.n	800566a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d130      	bne.n	800570a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056be:	f023 0310 	bic.w	r3, r3, #16
 80056c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80056d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e4      	bne.n	80056ae <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d103      	bne.n	80056fa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2210      	movs	r2, #16
 80056f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fb fbb6 	bl	8000e74 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005708:	e00e      	b.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fe fcb8 	bl	8004080 <HAL_UART_RxCpltCallback>
        break;
 8005710:	e00a      	b.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005712:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800571a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	f47f aeca 	bne.w	80054bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800572e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005732:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005736:	2b00      	cmp	r3, #0
 8005738:	d049      	beq.n	80057ce <UART_RxISR_16BIT_FIFOEN+0x35a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005740:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005744:	429a      	cmp	r2, r3
 8005746:	d242      	bcs.n	80057ce <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	623b      	str	r3, [r7, #32]
   return(result);
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800575e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800576c:	633a      	str	r2, [r7, #48]	@ 0x30
 800576e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e3      	bne.n	8005748 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a16      	ldr	r2, [pc, #88]	@ (80057dc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005784:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	60fb      	str	r3, [r7, #12]
   return(result);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f043 0320 	orr.w	r3, r3, #32
 800579a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	69b9      	ldr	r1, [r7, #24]
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	617b      	str	r3, [r7, #20]
   return(result);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e4      	bne.n	8005786 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057bc:	e007      	b.n	80057ce <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0208 	orr.w	r2, r2, #8
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	bf00      	nop
 80057d0:	37b8      	adds	r7, #184	@ 0xb8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40008000 	.word	0x40008000
 80057dc:	08004f59 	.word	0x08004f59

080057e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_UARTEx_DisableFifoMode+0x16>
 800582e:	2302      	movs	r3, #2
 8005830:	e027      	b.n	8005882 <HAL_UARTEx_DisableFifoMode+0x66>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2224      	movs	r2, #36	@ 0x24
 800583e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005860:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e02d      	b.n	8005902 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2224      	movs	r2, #36	@ 0x24
 80058b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8a0 	bl	8005a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800591e:	2302      	movs	r3, #2
 8005920:	e02d      	b.n	800597e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2224      	movs	r2, #36	@ 0x24
 800592e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f862 	bl	8005a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b08c      	sub	sp, #48	@ 0x30
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	4613      	mov	r3, r2
 8005992:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d13b      	bne.n	8005a1c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e034      	b.n	8005a1e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff f824 	bl	8004a14 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d11d      	bne.n	8005a10 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2210      	movs	r2, #16
 80059da:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f043 0310 	orr.w	r3, r3, #16
 80059f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6a39      	ldr	r1, [r7, #32]
 8005a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e6      	bne.n	80059dc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8005a0e:	e002      	b.n	8005a16 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8005a16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a1a:	e000      	b.n	8005a1e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3730      	adds	r7, #48	@ 0x30
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d108      	bne.n	8005a4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a48:	e031      	b.n	8005aae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a4e:	2308      	movs	r3, #8
 8005a50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	0e5b      	lsrs	r3, r3, #25
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	0f5b      	lsrs	r3, r3, #29
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	7b3a      	ldrb	r2, [r7, #12]
 8005a76:	4911      	ldr	r1, [pc, #68]	@ (8005abc <UARTEx_SetNbDataToProcess+0x94>)
 8005a78:	5c8a      	ldrb	r2, [r1, r2]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a7e:	7b3a      	ldrb	r2, [r7, #12]
 8005a80:	490f      	ldr	r1, [pc, #60]	@ (8005ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8005a82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	7b7a      	ldrb	r2, [r7, #13]
 8005a94:	4909      	ldr	r1, [pc, #36]	@ (8005abc <UARTEx_SetNbDataToProcess+0x94>)
 8005a96:	5c8a      	ldrb	r2, [r1, r2]
 8005a98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a9c:	7b7a      	ldrb	r2, [r7, #13]
 8005a9e:	4908      	ldr	r1, [pc, #32]	@ (8005ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8005aa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	08006ad8 	.word	0x08006ad8
 8005ac0:	08006ae0 	.word	0x08006ae0

08005ac4 <std>:
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	4604      	mov	r4, r0
 8005aca:	e9c0 3300 	strd	r3, r3, [r0]
 8005ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ad2:	6083      	str	r3, [r0, #8]
 8005ad4:	8181      	strh	r1, [r0, #12]
 8005ad6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ad8:	81c2      	strh	r2, [r0, #14]
 8005ada:	6183      	str	r3, [r0, #24]
 8005adc:	4619      	mov	r1, r3
 8005ade:	2208      	movs	r2, #8
 8005ae0:	305c      	adds	r0, #92	@ 0x5c
 8005ae2:	f000 f921 	bl	8005d28 <memset>
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <std+0x58>)
 8005ae8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <std+0x5c>)
 8005aec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <std+0x60>)
 8005af0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <std+0x64>)
 8005af4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005af6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <std+0x68>)
 8005af8:	6224      	str	r4, [r4, #32]
 8005afa:	429c      	cmp	r4, r3
 8005afc:	d006      	beq.n	8005b0c <std+0x48>
 8005afe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b02:	4294      	cmp	r4, r2
 8005b04:	d002      	beq.n	8005b0c <std+0x48>
 8005b06:	33d0      	adds	r3, #208	@ 0xd0
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	d105      	bne.n	8005b18 <std+0x54>
 8005b0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b14:	f000 b93a 	b.w	8005d8c <__retarget_lock_init_recursive>
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	080065fd 	.word	0x080065fd
 8005b20:	0800661f 	.word	0x0800661f
 8005b24:	08006657 	.word	0x08006657
 8005b28:	0800667b 	.word	0x0800667b
 8005b2c:	200001d8 	.word	0x200001d8

08005b30 <stdio_exit_handler>:
 8005b30:	4a02      	ldr	r2, [pc, #8]	@ (8005b3c <stdio_exit_handler+0xc>)
 8005b32:	4903      	ldr	r1, [pc, #12]	@ (8005b40 <stdio_exit_handler+0x10>)
 8005b34:	4803      	ldr	r0, [pc, #12]	@ (8005b44 <stdio_exit_handler+0x14>)
 8005b36:	f000 b869 	b.w	8005c0c <_fwalk_sglue>
 8005b3a:	bf00      	nop
 8005b3c:	20000010 	.word	0x20000010
 8005b40:	08006595 	.word	0x08006595
 8005b44:	20000020 	.word	0x20000020

08005b48 <cleanup_stdio>:
 8005b48:	6841      	ldr	r1, [r0, #4]
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b7c <cleanup_stdio+0x34>)
 8005b4c:	4299      	cmp	r1, r3
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	4604      	mov	r4, r0
 8005b52:	d001      	beq.n	8005b58 <cleanup_stdio+0x10>
 8005b54:	f000 fd1e 	bl	8006594 <_fflush_r>
 8005b58:	68a1      	ldr	r1, [r4, #8]
 8005b5a:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <cleanup_stdio+0x38>)
 8005b5c:	4299      	cmp	r1, r3
 8005b5e:	d002      	beq.n	8005b66 <cleanup_stdio+0x1e>
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fd17 	bl	8006594 <_fflush_r>
 8005b66:	68e1      	ldr	r1, [r4, #12]
 8005b68:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <cleanup_stdio+0x3c>)
 8005b6a:	4299      	cmp	r1, r3
 8005b6c:	d004      	beq.n	8005b78 <cleanup_stdio+0x30>
 8005b6e:	4620      	mov	r0, r4
 8005b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b74:	f000 bd0e 	b.w	8006594 <_fflush_r>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200001d8 	.word	0x200001d8
 8005b80:	20000240 	.word	0x20000240
 8005b84:	200002a8 	.word	0x200002a8

08005b88 <global_stdio_init.part.0>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <global_stdio_init.part.0+0x30>)
 8005b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8005bbc <global_stdio_init.part.0+0x34>)
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc0 <global_stdio_init.part.0+0x38>)
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	4620      	mov	r0, r4
 8005b94:	2200      	movs	r2, #0
 8005b96:	2104      	movs	r1, #4
 8005b98:	f7ff ff94 	bl	8005ac4 <std>
 8005b9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2109      	movs	r1, #9
 8005ba4:	f7ff ff8e 	bl	8005ac4 <std>
 8005ba8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bac:	2202      	movs	r2, #2
 8005bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb2:	2112      	movs	r1, #18
 8005bb4:	f7ff bf86 	b.w	8005ac4 <std>
 8005bb8:	20000310 	.word	0x20000310
 8005bbc:	200001d8 	.word	0x200001d8
 8005bc0:	08005b31 	.word	0x08005b31

08005bc4 <__sfp_lock_acquire>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__sfp_lock_acquire+0x8>)
 8005bc6:	f000 b8e2 	b.w	8005d8e <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20000315 	.word	0x20000315

08005bd0 <__sfp_lock_release>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	@ (8005bd8 <__sfp_lock_release+0x8>)
 8005bd2:	f000 b8dd 	b.w	8005d90 <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20000315 	.word	0x20000315

08005bdc <__sinit>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	4604      	mov	r4, r0
 8005be0:	f7ff fff0 	bl	8005bc4 <__sfp_lock_acquire>
 8005be4:	6a23      	ldr	r3, [r4, #32]
 8005be6:	b11b      	cbz	r3, 8005bf0 <__sinit+0x14>
 8005be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bec:	f7ff bff0 	b.w	8005bd0 <__sfp_lock_release>
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <__sinit+0x28>)
 8005bf2:	6223      	str	r3, [r4, #32]
 8005bf4:	4b04      	ldr	r3, [pc, #16]	@ (8005c08 <__sinit+0x2c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f5      	bne.n	8005be8 <__sinit+0xc>
 8005bfc:	f7ff ffc4 	bl	8005b88 <global_stdio_init.part.0>
 8005c00:	e7f2      	b.n	8005be8 <__sinit+0xc>
 8005c02:	bf00      	nop
 8005c04:	08005b49 	.word	0x08005b49
 8005c08:	20000310 	.word	0x20000310

08005c0c <_fwalk_sglue>:
 8005c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c10:	4607      	mov	r7, r0
 8005c12:	4688      	mov	r8, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	2600      	movs	r6, #0
 8005c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c20:	d505      	bpl.n	8005c2e <_fwalk_sglue+0x22>
 8005c22:	6824      	ldr	r4, [r4, #0]
 8005c24:	2c00      	cmp	r4, #0
 8005c26:	d1f7      	bne.n	8005c18 <_fwalk_sglue+0xc>
 8005c28:	4630      	mov	r0, r6
 8005c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d907      	bls.n	8005c44 <_fwalk_sglue+0x38>
 8005c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	d003      	beq.n	8005c44 <_fwalk_sglue+0x38>
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4638      	mov	r0, r7
 8005c40:	47c0      	blx	r8
 8005c42:	4306      	orrs	r6, r0
 8005c44:	3568      	adds	r5, #104	@ 0x68
 8005c46:	e7e9      	b.n	8005c1c <_fwalk_sglue+0x10>

08005c48 <iprintf>:
 8005c48:	b40f      	push	{r0, r1, r2, r3}
 8005c4a:	b507      	push	{r0, r1, r2, lr}
 8005c4c:	4906      	ldr	r1, [pc, #24]	@ (8005c68 <iprintf+0x20>)
 8005c4e:	ab04      	add	r3, sp, #16
 8005c50:	6808      	ldr	r0, [r1, #0]
 8005c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c56:	6881      	ldr	r1, [r0, #8]
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	f000 f8d1 	bl	8005e00 <_vfiprintf_r>
 8005c5e:	b003      	add	sp, #12
 8005c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c64:	b004      	add	sp, #16
 8005c66:	4770      	bx	lr
 8005c68:	2000001c 	.word	0x2000001c

08005c6c <_puts_r>:
 8005c6c:	6a03      	ldr	r3, [r0, #32]
 8005c6e:	b570      	push	{r4, r5, r6, lr}
 8005c70:	6884      	ldr	r4, [r0, #8]
 8005c72:	4605      	mov	r5, r0
 8005c74:	460e      	mov	r6, r1
 8005c76:	b90b      	cbnz	r3, 8005c7c <_puts_r+0x10>
 8005c78:	f7ff ffb0 	bl	8005bdc <__sinit>
 8005c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c7e:	07db      	lsls	r3, r3, #31
 8005c80:	d405      	bmi.n	8005c8e <_puts_r+0x22>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	0598      	lsls	r0, r3, #22
 8005c86:	d402      	bmi.n	8005c8e <_puts_r+0x22>
 8005c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c8a:	f000 f880 	bl	8005d8e <__retarget_lock_acquire_recursive>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	0719      	lsls	r1, r3, #28
 8005c92:	d502      	bpl.n	8005c9a <_puts_r+0x2e>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d135      	bne.n	8005d06 <_puts_r+0x9a>
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 fd2f 	bl	8006700 <__swsetup_r>
 8005ca2:	b380      	cbz	r0, 8005d06 <_puts_r+0x9a>
 8005ca4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005ca8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005caa:	07da      	lsls	r2, r3, #31
 8005cac:	d405      	bmi.n	8005cba <_puts_r+0x4e>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	059b      	lsls	r3, r3, #22
 8005cb2:	d402      	bmi.n	8005cba <_puts_r+0x4e>
 8005cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cb6:	f000 f86b 	bl	8005d90 <__retarget_lock_release_recursive>
 8005cba:	4628      	mov	r0, r5
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	da04      	bge.n	8005ccc <_puts_r+0x60>
 8005cc2:	69a2      	ldr	r2, [r4, #24]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	dc17      	bgt.n	8005cf8 <_puts_r+0x8c>
 8005cc8:	290a      	cmp	r1, #10
 8005cca:	d015      	beq.n	8005cf8 <_puts_r+0x8c>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	7019      	strb	r1, [r3, #0]
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	60a3      	str	r3, [r4, #8]
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	d1ed      	bne.n	8005cbe <_puts_r+0x52>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	da11      	bge.n	8005d0a <_puts_r+0x9e>
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	210a      	movs	r1, #10
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 fcc9 	bl	8006682 <__swbuf_r>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d0d7      	beq.n	8005ca4 <_puts_r+0x38>
 8005cf4:	250a      	movs	r5, #10
 8005cf6:	e7d7      	b.n	8005ca8 <_puts_r+0x3c>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f000 fcc1 	bl	8006682 <__swbuf_r>
 8005d00:	3001      	adds	r0, #1
 8005d02:	d1e7      	bne.n	8005cd4 <_puts_r+0x68>
 8005d04:	e7ce      	b.n	8005ca4 <_puts_r+0x38>
 8005d06:	3e01      	subs	r6, #1
 8005d08:	e7e4      	b.n	8005cd4 <_puts_r+0x68>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	6022      	str	r2, [r4, #0]
 8005d10:	220a      	movs	r2, #10
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	e7ee      	b.n	8005cf4 <_puts_r+0x88>
	...

08005d18 <puts>:
 8005d18:	4b02      	ldr	r3, [pc, #8]	@ (8005d24 <puts+0xc>)
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f7ff bfa5 	b.w	8005c6c <_puts_r>
 8005d22:	bf00      	nop
 8005d24:	2000001c 	.word	0x2000001c

08005d28 <memset>:
 8005d28:	4402      	add	r2, r0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <memset+0xa>
 8005d30:	4770      	bx	lr
 8005d32:	f803 1b01 	strb.w	r1, [r3], #1
 8005d36:	e7f9      	b.n	8005d2c <memset+0x4>

08005d38 <__errno>:
 8005d38:	4b01      	ldr	r3, [pc, #4]	@ (8005d40 <__errno+0x8>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	2000001c 	.word	0x2000001c

08005d44 <__libc_init_array>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4d0d      	ldr	r5, [pc, #52]	@ (8005d7c <__libc_init_array+0x38>)
 8005d48:	4c0d      	ldr	r4, [pc, #52]	@ (8005d80 <__libc_init_array+0x3c>)
 8005d4a:	1b64      	subs	r4, r4, r5
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	2600      	movs	r6, #0
 8005d50:	42a6      	cmp	r6, r4
 8005d52:	d109      	bne.n	8005d68 <__libc_init_array+0x24>
 8005d54:	4d0b      	ldr	r5, [pc, #44]	@ (8005d84 <__libc_init_array+0x40>)
 8005d56:	4c0c      	ldr	r4, [pc, #48]	@ (8005d88 <__libc_init_array+0x44>)
 8005d58:	f000 fe4c 	bl	80069f4 <_init>
 8005d5c:	1b64      	subs	r4, r4, r5
 8005d5e:	10a4      	asrs	r4, r4, #2
 8005d60:	2600      	movs	r6, #0
 8005d62:	42a6      	cmp	r6, r4
 8005d64:	d105      	bne.n	8005d72 <__libc_init_array+0x2e>
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6c:	4798      	blx	r3
 8005d6e:	3601      	adds	r6, #1
 8005d70:	e7ee      	b.n	8005d50 <__libc_init_array+0xc>
 8005d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d76:	4798      	blx	r3
 8005d78:	3601      	adds	r6, #1
 8005d7a:	e7f2      	b.n	8005d62 <__libc_init_array+0x1e>
 8005d7c:	08006b24 	.word	0x08006b24
 8005d80:	08006b24 	.word	0x08006b24
 8005d84:	08006b24 	.word	0x08006b24
 8005d88:	08006b28 	.word	0x08006b28

08005d8c <__retarget_lock_init_recursive>:
 8005d8c:	4770      	bx	lr

08005d8e <__retarget_lock_acquire_recursive>:
 8005d8e:	4770      	bx	lr

08005d90 <__retarget_lock_release_recursive>:
 8005d90:	4770      	bx	lr

08005d92 <memcpy>:
 8005d92:	440a      	add	r2, r1
 8005d94:	4291      	cmp	r1, r2
 8005d96:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005d9a:	d100      	bne.n	8005d9e <memcpy+0xc>
 8005d9c:	4770      	bx	lr
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da8:	4291      	cmp	r1, r2
 8005daa:	d1f9      	bne.n	8005da0 <memcpy+0xe>
 8005dac:	bd10      	pop	{r4, pc}

08005dae <__sfputc_r>:
 8005dae:	6893      	ldr	r3, [r2, #8]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	b410      	push	{r4}
 8005db6:	6093      	str	r3, [r2, #8]
 8005db8:	da08      	bge.n	8005dcc <__sfputc_r+0x1e>
 8005dba:	6994      	ldr	r4, [r2, #24]
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	db01      	blt.n	8005dc4 <__sfputc_r+0x16>
 8005dc0:	290a      	cmp	r1, #10
 8005dc2:	d103      	bne.n	8005dcc <__sfputc_r+0x1e>
 8005dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dc8:	f000 bc5b 	b.w	8006682 <__swbuf_r>
 8005dcc:	6813      	ldr	r3, [r2, #0]
 8005dce:	1c58      	adds	r0, r3, #1
 8005dd0:	6010      	str	r0, [r2, #0]
 8005dd2:	7019      	strb	r1, [r3, #0]
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <__sfputs_r>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	4606      	mov	r6, r0
 8005de0:	460f      	mov	r7, r1
 8005de2:	4614      	mov	r4, r2
 8005de4:	18d5      	adds	r5, r2, r3
 8005de6:	42ac      	cmp	r4, r5
 8005de8:	d101      	bne.n	8005dee <__sfputs_r+0x12>
 8005dea:	2000      	movs	r0, #0
 8005dec:	e007      	b.n	8005dfe <__sfputs_r+0x22>
 8005dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df2:	463a      	mov	r2, r7
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff ffda 	bl	8005dae <__sfputc_r>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d1f3      	bne.n	8005de6 <__sfputs_r+0xa>
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e00 <_vfiprintf_r>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	460d      	mov	r5, r1
 8005e06:	b09d      	sub	sp, #116	@ 0x74
 8005e08:	4614      	mov	r4, r2
 8005e0a:	4698      	mov	r8, r3
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	b118      	cbz	r0, 8005e18 <_vfiprintf_r+0x18>
 8005e10:	6a03      	ldr	r3, [r0, #32]
 8005e12:	b90b      	cbnz	r3, 8005e18 <_vfiprintf_r+0x18>
 8005e14:	f7ff fee2 	bl	8005bdc <__sinit>
 8005e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e1a:	07d9      	lsls	r1, r3, #31
 8005e1c:	d405      	bmi.n	8005e2a <_vfiprintf_r+0x2a>
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	059a      	lsls	r2, r3, #22
 8005e22:	d402      	bmi.n	8005e2a <_vfiprintf_r+0x2a>
 8005e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e26:	f7ff ffb2 	bl	8005d8e <__retarget_lock_acquire_recursive>
 8005e2a:	89ab      	ldrh	r3, [r5, #12]
 8005e2c:	071b      	lsls	r3, r3, #28
 8005e2e:	d501      	bpl.n	8005e34 <_vfiprintf_r+0x34>
 8005e30:	692b      	ldr	r3, [r5, #16]
 8005e32:	b99b      	cbnz	r3, 8005e5c <_vfiprintf_r+0x5c>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 fc62 	bl	8006700 <__swsetup_r>
 8005e3c:	b170      	cbz	r0, 8005e5c <_vfiprintf_r+0x5c>
 8005e3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e40:	07dc      	lsls	r4, r3, #31
 8005e42:	d504      	bpl.n	8005e4e <_vfiprintf_r+0x4e>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e48:	b01d      	add	sp, #116	@ 0x74
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4e:	89ab      	ldrh	r3, [r5, #12]
 8005e50:	0598      	lsls	r0, r3, #22
 8005e52:	d4f7      	bmi.n	8005e44 <_vfiprintf_r+0x44>
 8005e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e56:	f7ff ff9b 	bl	8005d90 <__retarget_lock_release_recursive>
 8005e5a:	e7f3      	b.n	8005e44 <_vfiprintf_r+0x44>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e60:	2320      	movs	r3, #32
 8005e62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6a:	2330      	movs	r3, #48	@ 0x30
 8005e6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800601c <_vfiprintf_r+0x21c>
 8005e70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e74:	f04f 0901 	mov.w	r9, #1
 8005e78:	4623      	mov	r3, r4
 8005e7a:	469a      	mov	sl, r3
 8005e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e80:	b10a      	cbz	r2, 8005e86 <_vfiprintf_r+0x86>
 8005e82:	2a25      	cmp	r2, #37	@ 0x25
 8005e84:	d1f9      	bne.n	8005e7a <_vfiprintf_r+0x7a>
 8005e86:	ebba 0b04 	subs.w	fp, sl, r4
 8005e8a:	d00b      	beq.n	8005ea4 <_vfiprintf_r+0xa4>
 8005e8c:	465b      	mov	r3, fp
 8005e8e:	4622      	mov	r2, r4
 8005e90:	4629      	mov	r1, r5
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ffa2 	bl	8005ddc <__sfputs_r>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f000 80a7 	beq.w	8005fec <_vfiprintf_r+0x1ec>
 8005e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea0:	445a      	add	r2, fp
 8005ea2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 809f 	beq.w	8005fec <_vfiprintf_r+0x1ec>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eb8:	f10a 0a01 	add.w	sl, sl, #1
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ec4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ec6:	4654      	mov	r4, sl
 8005ec8:	2205      	movs	r2, #5
 8005eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ece:	4853      	ldr	r0, [pc, #332]	@ (800601c <_vfiprintf_r+0x21c>)
 8005ed0:	f7fa f9a6 	bl	8000220 <memchr>
 8005ed4:	9a04      	ldr	r2, [sp, #16]
 8005ed6:	b9d8      	cbnz	r0, 8005f10 <_vfiprintf_r+0x110>
 8005ed8:	06d1      	lsls	r1, r2, #27
 8005eda:	bf44      	itt	mi
 8005edc:	2320      	movmi	r3, #32
 8005ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ee2:	0713      	lsls	r3, r2, #28
 8005ee4:	bf44      	itt	mi
 8005ee6:	232b      	movmi	r3, #43	@ 0x2b
 8005ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ef2:	d015      	beq.n	8005f20 <_vfiprintf_r+0x120>
 8005ef4:	9a07      	ldr	r2, [sp, #28]
 8005ef6:	4654      	mov	r4, sl
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f04f 0c0a 	mov.w	ip, #10
 8005efe:	4621      	mov	r1, r4
 8005f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f04:	3b30      	subs	r3, #48	@ 0x30
 8005f06:	2b09      	cmp	r3, #9
 8005f08:	d94b      	bls.n	8005fa2 <_vfiprintf_r+0x1a2>
 8005f0a:	b1b0      	cbz	r0, 8005f3a <_vfiprintf_r+0x13a>
 8005f0c:	9207      	str	r2, [sp, #28]
 8005f0e:	e014      	b.n	8005f3a <_vfiprintf_r+0x13a>
 8005f10:	eba0 0308 	sub.w	r3, r0, r8
 8005f14:	fa09 f303 	lsl.w	r3, r9, r3
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	46a2      	mov	sl, r4
 8005f1e:	e7d2      	b.n	8005ec6 <_vfiprintf_r+0xc6>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	1d19      	adds	r1, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	9103      	str	r1, [sp, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bfbb      	ittet	lt
 8005f2c:	425b      	neglt	r3, r3
 8005f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f32:	9307      	strge	r3, [sp, #28]
 8005f34:	9307      	strlt	r3, [sp, #28]
 8005f36:	bfb8      	it	lt
 8005f38:	9204      	strlt	r2, [sp, #16]
 8005f3a:	7823      	ldrb	r3, [r4, #0]
 8005f3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f3e:	d10a      	bne.n	8005f56 <_vfiprintf_r+0x156>
 8005f40:	7863      	ldrb	r3, [r4, #1]
 8005f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f44:	d132      	bne.n	8005fac <_vfiprintf_r+0x1ac>
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	9203      	str	r2, [sp, #12]
 8005f4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f52:	3402      	adds	r4, #2
 8005f54:	9305      	str	r3, [sp, #20]
 8005f56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800602c <_vfiprintf_r+0x22c>
 8005f5a:	7821      	ldrb	r1, [r4, #0]
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	4650      	mov	r0, sl
 8005f60:	f7fa f95e 	bl	8000220 <memchr>
 8005f64:	b138      	cbz	r0, 8005f76 <_vfiprintf_r+0x176>
 8005f66:	9b04      	ldr	r3, [sp, #16]
 8005f68:	eba0 000a 	sub.w	r0, r0, sl
 8005f6c:	2240      	movs	r2, #64	@ 0x40
 8005f6e:	4082      	lsls	r2, r0
 8005f70:	4313      	orrs	r3, r2
 8005f72:	3401      	adds	r4, #1
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7a:	4829      	ldr	r0, [pc, #164]	@ (8006020 <_vfiprintf_r+0x220>)
 8005f7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f80:	2206      	movs	r2, #6
 8005f82:	f7fa f94d 	bl	8000220 <memchr>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d03f      	beq.n	800600a <_vfiprintf_r+0x20a>
 8005f8a:	4b26      	ldr	r3, [pc, #152]	@ (8006024 <_vfiprintf_r+0x224>)
 8005f8c:	bb1b      	cbnz	r3, 8005fd6 <_vfiprintf_r+0x1d6>
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	3307      	adds	r3, #7
 8005f92:	f023 0307 	bic.w	r3, r3, #7
 8005f96:	3308      	adds	r3, #8
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9c:	443b      	add	r3, r7
 8005f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa0:	e76a      	b.n	8005e78 <_vfiprintf_r+0x78>
 8005fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	2001      	movs	r0, #1
 8005faa:	e7a8      	b.n	8005efe <_vfiprintf_r+0xfe>
 8005fac:	2300      	movs	r3, #0
 8005fae:	3401      	adds	r4, #1
 8005fb0:	9305      	str	r3, [sp, #20]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	f04f 0c0a 	mov.w	ip, #10
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fbe:	3a30      	subs	r2, #48	@ 0x30
 8005fc0:	2a09      	cmp	r2, #9
 8005fc2:	d903      	bls.n	8005fcc <_vfiprintf_r+0x1cc>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0c6      	beq.n	8005f56 <_vfiprintf_r+0x156>
 8005fc8:	9105      	str	r1, [sp, #20]
 8005fca:	e7c4      	b.n	8005f56 <_vfiprintf_r+0x156>
 8005fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7f0      	b.n	8005fb8 <_vfiprintf_r+0x1b8>
 8005fd6:	ab03      	add	r3, sp, #12
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	462a      	mov	r2, r5
 8005fdc:	4b12      	ldr	r3, [pc, #72]	@ (8006028 <_vfiprintf_r+0x228>)
 8005fde:	a904      	add	r1, sp, #16
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f3af 8000 	nop.w
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	1c78      	adds	r0, r7, #1
 8005fea:	d1d6      	bne.n	8005f9a <_vfiprintf_r+0x19a>
 8005fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fee:	07d9      	lsls	r1, r3, #31
 8005ff0:	d405      	bmi.n	8005ffe <_vfiprintf_r+0x1fe>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	059a      	lsls	r2, r3, #22
 8005ff6:	d402      	bmi.n	8005ffe <_vfiprintf_r+0x1fe>
 8005ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ffa:	f7ff fec9 	bl	8005d90 <__retarget_lock_release_recursive>
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	065b      	lsls	r3, r3, #25
 8006002:	f53f af1f 	bmi.w	8005e44 <_vfiprintf_r+0x44>
 8006006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006008:	e71e      	b.n	8005e48 <_vfiprintf_r+0x48>
 800600a:	ab03      	add	r3, sp, #12
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	462a      	mov	r2, r5
 8006010:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <_vfiprintf_r+0x228>)
 8006012:	a904      	add	r1, sp, #16
 8006014:	4630      	mov	r0, r6
 8006016:	f000 f91b 	bl	8006250 <_printf_i>
 800601a:	e7e4      	b.n	8005fe6 <_vfiprintf_r+0x1e6>
 800601c:	08006ae8 	.word	0x08006ae8
 8006020:	08006af2 	.word	0x08006af2
 8006024:	00000000 	.word	0x00000000
 8006028:	08005ddd 	.word	0x08005ddd
 800602c:	08006aee 	.word	0x08006aee

08006030 <sbrk_aligned>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4e0f      	ldr	r6, [pc, #60]	@ (8006070 <sbrk_aligned+0x40>)
 8006034:	460c      	mov	r4, r1
 8006036:	6831      	ldr	r1, [r6, #0]
 8006038:	4605      	mov	r5, r0
 800603a:	b911      	cbnz	r1, 8006042 <sbrk_aligned+0x12>
 800603c:	f000 fc4c 	bl	80068d8 <_sbrk_r>
 8006040:	6030      	str	r0, [r6, #0]
 8006042:	4621      	mov	r1, r4
 8006044:	4628      	mov	r0, r5
 8006046:	f000 fc47 	bl	80068d8 <_sbrk_r>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	d103      	bne.n	8006056 <sbrk_aligned+0x26>
 800604e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006052:	4620      	mov	r0, r4
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	1cc4      	adds	r4, r0, #3
 8006058:	f024 0403 	bic.w	r4, r4, #3
 800605c:	42a0      	cmp	r0, r4
 800605e:	d0f8      	beq.n	8006052 <sbrk_aligned+0x22>
 8006060:	1a21      	subs	r1, r4, r0
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fc38 	bl	80068d8 <_sbrk_r>
 8006068:	3001      	adds	r0, #1
 800606a:	d1f2      	bne.n	8006052 <sbrk_aligned+0x22>
 800606c:	e7ef      	b.n	800604e <sbrk_aligned+0x1e>
 800606e:	bf00      	nop
 8006070:	20000318 	.word	0x20000318

08006074 <_malloc_r>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	1ccd      	adds	r5, r1, #3
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	2d00      	cmp	r5, #0
 8006088:	4606      	mov	r6, r0
 800608a:	db01      	blt.n	8006090 <_malloc_r+0x1c>
 800608c:	42a9      	cmp	r1, r5
 800608e:	d904      	bls.n	800609a <_malloc_r+0x26>
 8006090:	230c      	movs	r3, #12
 8006092:	6033      	str	r3, [r6, #0]
 8006094:	2000      	movs	r0, #0
 8006096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006170 <_malloc_r+0xfc>
 800609e:	f000 faa1 	bl	80065e4 <__malloc_lock>
 80060a2:	f8d8 3000 	ldr.w	r3, [r8]
 80060a6:	461c      	mov	r4, r3
 80060a8:	bb44      	cbnz	r4, 80060fc <_malloc_r+0x88>
 80060aa:	4629      	mov	r1, r5
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff ffbf 	bl	8006030 <sbrk_aligned>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	4604      	mov	r4, r0
 80060b6:	d158      	bne.n	800616a <_malloc_r+0xf6>
 80060b8:	f8d8 4000 	ldr.w	r4, [r8]
 80060bc:	4627      	mov	r7, r4
 80060be:	2f00      	cmp	r7, #0
 80060c0:	d143      	bne.n	800614a <_malloc_r+0xd6>
 80060c2:	2c00      	cmp	r4, #0
 80060c4:	d04b      	beq.n	800615e <_malloc_r+0xea>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	4639      	mov	r1, r7
 80060ca:	4630      	mov	r0, r6
 80060cc:	eb04 0903 	add.w	r9, r4, r3
 80060d0:	f000 fc02 	bl	80068d8 <_sbrk_r>
 80060d4:	4581      	cmp	r9, r0
 80060d6:	d142      	bne.n	800615e <_malloc_r+0xea>
 80060d8:	6821      	ldr	r1, [r4, #0]
 80060da:	1a6d      	subs	r5, r5, r1
 80060dc:	4629      	mov	r1, r5
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff ffa6 	bl	8006030 <sbrk_aligned>
 80060e4:	3001      	adds	r0, #1
 80060e6:	d03a      	beq.n	800615e <_malloc_r+0xea>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	442b      	add	r3, r5
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	f8d8 3000 	ldr.w	r3, [r8]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	bb62      	cbnz	r2, 8006150 <_malloc_r+0xdc>
 80060f6:	f8c8 7000 	str.w	r7, [r8]
 80060fa:	e00f      	b.n	800611c <_malloc_r+0xa8>
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	1b52      	subs	r2, r2, r5
 8006100:	d420      	bmi.n	8006144 <_malloc_r+0xd0>
 8006102:	2a0b      	cmp	r2, #11
 8006104:	d917      	bls.n	8006136 <_malloc_r+0xc2>
 8006106:	1961      	adds	r1, r4, r5
 8006108:	42a3      	cmp	r3, r4
 800610a:	6025      	str	r5, [r4, #0]
 800610c:	bf18      	it	ne
 800610e:	6059      	strne	r1, [r3, #4]
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	bf08      	it	eq
 8006114:	f8c8 1000 	streq.w	r1, [r8]
 8006118:	5162      	str	r2, [r4, r5]
 800611a:	604b      	str	r3, [r1, #4]
 800611c:	4630      	mov	r0, r6
 800611e:	f000 fa67 	bl	80065f0 <__malloc_unlock>
 8006122:	f104 000b 	add.w	r0, r4, #11
 8006126:	1d23      	adds	r3, r4, #4
 8006128:	f020 0007 	bic.w	r0, r0, #7
 800612c:	1ac2      	subs	r2, r0, r3
 800612e:	bf1c      	itt	ne
 8006130:	1a1b      	subne	r3, r3, r0
 8006132:	50a3      	strne	r3, [r4, r2]
 8006134:	e7af      	b.n	8006096 <_malloc_r+0x22>
 8006136:	6862      	ldr	r2, [r4, #4]
 8006138:	42a3      	cmp	r3, r4
 800613a:	bf0c      	ite	eq
 800613c:	f8c8 2000 	streq.w	r2, [r8]
 8006140:	605a      	strne	r2, [r3, #4]
 8006142:	e7eb      	b.n	800611c <_malloc_r+0xa8>
 8006144:	4623      	mov	r3, r4
 8006146:	6864      	ldr	r4, [r4, #4]
 8006148:	e7ae      	b.n	80060a8 <_malloc_r+0x34>
 800614a:	463c      	mov	r4, r7
 800614c:	687f      	ldr	r7, [r7, #4]
 800614e:	e7b6      	b.n	80060be <_malloc_r+0x4a>
 8006150:	461a      	mov	r2, r3
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	42a3      	cmp	r3, r4
 8006156:	d1fb      	bne.n	8006150 <_malloc_r+0xdc>
 8006158:	2300      	movs	r3, #0
 800615a:	6053      	str	r3, [r2, #4]
 800615c:	e7de      	b.n	800611c <_malloc_r+0xa8>
 800615e:	230c      	movs	r3, #12
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	4630      	mov	r0, r6
 8006164:	f000 fa44 	bl	80065f0 <__malloc_unlock>
 8006168:	e794      	b.n	8006094 <_malloc_r+0x20>
 800616a:	6005      	str	r5, [r0, #0]
 800616c:	e7d6      	b.n	800611c <_malloc_r+0xa8>
 800616e:	bf00      	nop
 8006170:	2000031c 	.word	0x2000031c

08006174 <_printf_common>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	4616      	mov	r6, r2
 800617a:	4698      	mov	r8, r3
 800617c:	688a      	ldr	r2, [r1, #8]
 800617e:	690b      	ldr	r3, [r1, #16]
 8006180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006184:	4293      	cmp	r3, r2
 8006186:	bfb8      	it	lt
 8006188:	4613      	movlt	r3, r2
 800618a:	6033      	str	r3, [r6, #0]
 800618c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006190:	4607      	mov	r7, r0
 8006192:	460c      	mov	r4, r1
 8006194:	b10a      	cbz	r2, 800619a <_printf_common+0x26>
 8006196:	3301      	adds	r3, #1
 8006198:	6033      	str	r3, [r6, #0]
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	0699      	lsls	r1, r3, #26
 800619e:	bf42      	ittt	mi
 80061a0:	6833      	ldrmi	r3, [r6, #0]
 80061a2:	3302      	addmi	r3, #2
 80061a4:	6033      	strmi	r3, [r6, #0]
 80061a6:	6825      	ldr	r5, [r4, #0]
 80061a8:	f015 0506 	ands.w	r5, r5, #6
 80061ac:	d106      	bne.n	80061bc <_printf_common+0x48>
 80061ae:	f104 0a19 	add.w	sl, r4, #25
 80061b2:	68e3      	ldr	r3, [r4, #12]
 80061b4:	6832      	ldr	r2, [r6, #0]
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	42ab      	cmp	r3, r5
 80061ba:	dc26      	bgt.n	800620a <_printf_common+0x96>
 80061bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	3b00      	subs	r3, #0
 80061c4:	bf18      	it	ne
 80061c6:	2301      	movne	r3, #1
 80061c8:	0692      	lsls	r2, r2, #26
 80061ca:	d42b      	bmi.n	8006224 <_printf_common+0xb0>
 80061cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061d0:	4641      	mov	r1, r8
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c8      	blx	r9
 80061d6:	3001      	adds	r0, #1
 80061d8:	d01e      	beq.n	8006218 <_printf_common+0xa4>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	f003 0306 	and.w	r3, r3, #6
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	bf02      	ittt	eq
 80061e6:	68e5      	ldreq	r5, [r4, #12]
 80061e8:	6833      	ldreq	r3, [r6, #0]
 80061ea:	1aed      	subeq	r5, r5, r3
 80061ec:	68a3      	ldr	r3, [r4, #8]
 80061ee:	bf0c      	ite	eq
 80061f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f4:	2500      	movne	r5, #0
 80061f6:	4293      	cmp	r3, r2
 80061f8:	bfc4      	itt	gt
 80061fa:	1a9b      	subgt	r3, r3, r2
 80061fc:	18ed      	addgt	r5, r5, r3
 80061fe:	2600      	movs	r6, #0
 8006200:	341a      	adds	r4, #26
 8006202:	42b5      	cmp	r5, r6
 8006204:	d11a      	bne.n	800623c <_printf_common+0xc8>
 8006206:	2000      	movs	r0, #0
 8006208:	e008      	b.n	800621c <_printf_common+0xa8>
 800620a:	2301      	movs	r3, #1
 800620c:	4652      	mov	r2, sl
 800620e:	4641      	mov	r1, r8
 8006210:	4638      	mov	r0, r7
 8006212:	47c8      	blx	r9
 8006214:	3001      	adds	r0, #1
 8006216:	d103      	bne.n	8006220 <_printf_common+0xac>
 8006218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	3501      	adds	r5, #1
 8006222:	e7c6      	b.n	80061b2 <_printf_common+0x3e>
 8006224:	18e1      	adds	r1, r4, r3
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	2030      	movs	r0, #48	@ 0x30
 800622a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800622e:	4422      	add	r2, r4
 8006230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006234:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006238:	3302      	adds	r3, #2
 800623a:	e7c7      	b.n	80061cc <_printf_common+0x58>
 800623c:	2301      	movs	r3, #1
 800623e:	4622      	mov	r2, r4
 8006240:	4641      	mov	r1, r8
 8006242:	4638      	mov	r0, r7
 8006244:	47c8      	blx	r9
 8006246:	3001      	adds	r0, #1
 8006248:	d0e6      	beq.n	8006218 <_printf_common+0xa4>
 800624a:	3601      	adds	r6, #1
 800624c:	e7d9      	b.n	8006202 <_printf_common+0x8e>
	...

08006250 <_printf_i>:
 8006250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006254:	7e0f      	ldrb	r7, [r1, #24]
 8006256:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006258:	2f78      	cmp	r7, #120	@ 0x78
 800625a:	4691      	mov	r9, r2
 800625c:	4680      	mov	r8, r0
 800625e:	460c      	mov	r4, r1
 8006260:	469a      	mov	sl, r3
 8006262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006266:	d807      	bhi.n	8006278 <_printf_i+0x28>
 8006268:	2f62      	cmp	r7, #98	@ 0x62
 800626a:	d80a      	bhi.n	8006282 <_printf_i+0x32>
 800626c:	2f00      	cmp	r7, #0
 800626e:	f000 80d1 	beq.w	8006414 <_printf_i+0x1c4>
 8006272:	2f58      	cmp	r7, #88	@ 0x58
 8006274:	f000 80b8 	beq.w	80063e8 <_printf_i+0x198>
 8006278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800627c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006280:	e03a      	b.n	80062f8 <_printf_i+0xa8>
 8006282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006286:	2b15      	cmp	r3, #21
 8006288:	d8f6      	bhi.n	8006278 <_printf_i+0x28>
 800628a:	a101      	add	r1, pc, #4	@ (adr r1, 8006290 <_printf_i+0x40>)
 800628c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062fd 	.word	0x080062fd
 8006298:	08006279 	.word	0x08006279
 800629c:	08006279 	.word	0x08006279
 80062a0:	08006279 	.word	0x08006279
 80062a4:	08006279 	.word	0x08006279
 80062a8:	080062fd 	.word	0x080062fd
 80062ac:	08006279 	.word	0x08006279
 80062b0:	08006279 	.word	0x08006279
 80062b4:	08006279 	.word	0x08006279
 80062b8:	08006279 	.word	0x08006279
 80062bc:	080063fb 	.word	0x080063fb
 80062c0:	08006327 	.word	0x08006327
 80062c4:	080063b5 	.word	0x080063b5
 80062c8:	08006279 	.word	0x08006279
 80062cc:	08006279 	.word	0x08006279
 80062d0:	0800641d 	.word	0x0800641d
 80062d4:	08006279 	.word	0x08006279
 80062d8:	08006327 	.word	0x08006327
 80062dc:	08006279 	.word	0x08006279
 80062e0:	08006279 	.word	0x08006279
 80062e4:	080063bd 	.word	0x080063bd
 80062e8:	6833      	ldr	r3, [r6, #0]
 80062ea:	1d1a      	adds	r2, r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6032      	str	r2, [r6, #0]
 80062f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062f8:	2301      	movs	r3, #1
 80062fa:	e09c      	b.n	8006436 <_printf_i+0x1e6>
 80062fc:	6833      	ldr	r3, [r6, #0]
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	1d19      	adds	r1, r3, #4
 8006302:	6031      	str	r1, [r6, #0]
 8006304:	0606      	lsls	r6, r0, #24
 8006306:	d501      	bpl.n	800630c <_printf_i+0xbc>
 8006308:	681d      	ldr	r5, [r3, #0]
 800630a:	e003      	b.n	8006314 <_printf_i+0xc4>
 800630c:	0645      	lsls	r5, r0, #25
 800630e:	d5fb      	bpl.n	8006308 <_printf_i+0xb8>
 8006310:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006314:	2d00      	cmp	r5, #0
 8006316:	da03      	bge.n	8006320 <_printf_i+0xd0>
 8006318:	232d      	movs	r3, #45	@ 0x2d
 800631a:	426d      	negs	r5, r5
 800631c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006320:	4858      	ldr	r0, [pc, #352]	@ (8006484 <_printf_i+0x234>)
 8006322:	230a      	movs	r3, #10
 8006324:	e011      	b.n	800634a <_printf_i+0xfa>
 8006326:	6821      	ldr	r1, [r4, #0]
 8006328:	6833      	ldr	r3, [r6, #0]
 800632a:	0608      	lsls	r0, r1, #24
 800632c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006330:	d402      	bmi.n	8006338 <_printf_i+0xe8>
 8006332:	0649      	lsls	r1, r1, #25
 8006334:	bf48      	it	mi
 8006336:	b2ad      	uxthmi	r5, r5
 8006338:	2f6f      	cmp	r7, #111	@ 0x6f
 800633a:	4852      	ldr	r0, [pc, #328]	@ (8006484 <_printf_i+0x234>)
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	bf14      	ite	ne
 8006340:	230a      	movne	r3, #10
 8006342:	2308      	moveq	r3, #8
 8006344:	2100      	movs	r1, #0
 8006346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800634a:	6866      	ldr	r6, [r4, #4]
 800634c:	60a6      	str	r6, [r4, #8]
 800634e:	2e00      	cmp	r6, #0
 8006350:	db05      	blt.n	800635e <_printf_i+0x10e>
 8006352:	6821      	ldr	r1, [r4, #0]
 8006354:	432e      	orrs	r6, r5
 8006356:	f021 0104 	bic.w	r1, r1, #4
 800635a:	6021      	str	r1, [r4, #0]
 800635c:	d04b      	beq.n	80063f6 <_printf_i+0x1a6>
 800635e:	4616      	mov	r6, r2
 8006360:	fbb5 f1f3 	udiv	r1, r5, r3
 8006364:	fb03 5711 	mls	r7, r3, r1, r5
 8006368:	5dc7      	ldrb	r7, [r0, r7]
 800636a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800636e:	462f      	mov	r7, r5
 8006370:	42bb      	cmp	r3, r7
 8006372:	460d      	mov	r5, r1
 8006374:	d9f4      	bls.n	8006360 <_printf_i+0x110>
 8006376:	2b08      	cmp	r3, #8
 8006378:	d10b      	bne.n	8006392 <_printf_i+0x142>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	07df      	lsls	r7, r3, #31
 800637e:	d508      	bpl.n	8006392 <_printf_i+0x142>
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	6861      	ldr	r1, [r4, #4]
 8006384:	4299      	cmp	r1, r3
 8006386:	bfde      	ittt	le
 8006388:	2330      	movle	r3, #48	@ 0x30
 800638a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800638e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006392:	1b92      	subs	r2, r2, r6
 8006394:	6122      	str	r2, [r4, #16]
 8006396:	f8cd a000 	str.w	sl, [sp]
 800639a:	464b      	mov	r3, r9
 800639c:	aa03      	add	r2, sp, #12
 800639e:	4621      	mov	r1, r4
 80063a0:	4640      	mov	r0, r8
 80063a2:	f7ff fee7 	bl	8006174 <_printf_common>
 80063a6:	3001      	adds	r0, #1
 80063a8:	d14a      	bne.n	8006440 <_printf_i+0x1f0>
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063ae:	b004      	add	sp, #16
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	f043 0320 	orr.w	r3, r3, #32
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	4832      	ldr	r0, [pc, #200]	@ (8006488 <_printf_i+0x238>)
 80063be:	2778      	movs	r7, #120	@ 0x78
 80063c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	6831      	ldr	r1, [r6, #0]
 80063c8:	061f      	lsls	r7, r3, #24
 80063ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80063ce:	d402      	bmi.n	80063d6 <_printf_i+0x186>
 80063d0:	065f      	lsls	r7, r3, #25
 80063d2:	bf48      	it	mi
 80063d4:	b2ad      	uxthmi	r5, r5
 80063d6:	6031      	str	r1, [r6, #0]
 80063d8:	07d9      	lsls	r1, r3, #31
 80063da:	bf44      	itt	mi
 80063dc:	f043 0320 	orrmi.w	r3, r3, #32
 80063e0:	6023      	strmi	r3, [r4, #0]
 80063e2:	b11d      	cbz	r5, 80063ec <_printf_i+0x19c>
 80063e4:	2310      	movs	r3, #16
 80063e6:	e7ad      	b.n	8006344 <_printf_i+0xf4>
 80063e8:	4826      	ldr	r0, [pc, #152]	@ (8006484 <_printf_i+0x234>)
 80063ea:	e7e9      	b.n	80063c0 <_printf_i+0x170>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	e7f6      	b.n	80063e4 <_printf_i+0x194>
 80063f6:	4616      	mov	r6, r2
 80063f8:	e7bd      	b.n	8006376 <_printf_i+0x126>
 80063fa:	6833      	ldr	r3, [r6, #0]
 80063fc:	6825      	ldr	r5, [r4, #0]
 80063fe:	6961      	ldr	r1, [r4, #20]
 8006400:	1d18      	adds	r0, r3, #4
 8006402:	6030      	str	r0, [r6, #0]
 8006404:	062e      	lsls	r6, r5, #24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	d501      	bpl.n	800640e <_printf_i+0x1be>
 800640a:	6019      	str	r1, [r3, #0]
 800640c:	e002      	b.n	8006414 <_printf_i+0x1c4>
 800640e:	0668      	lsls	r0, r5, #25
 8006410:	d5fb      	bpl.n	800640a <_printf_i+0x1ba>
 8006412:	8019      	strh	r1, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	4616      	mov	r6, r2
 800641a:	e7bc      	b.n	8006396 <_printf_i+0x146>
 800641c:	6833      	ldr	r3, [r6, #0]
 800641e:	1d1a      	adds	r2, r3, #4
 8006420:	6032      	str	r2, [r6, #0]
 8006422:	681e      	ldr	r6, [r3, #0]
 8006424:	6862      	ldr	r2, [r4, #4]
 8006426:	2100      	movs	r1, #0
 8006428:	4630      	mov	r0, r6
 800642a:	f7f9 fef9 	bl	8000220 <memchr>
 800642e:	b108      	cbz	r0, 8006434 <_printf_i+0x1e4>
 8006430:	1b80      	subs	r0, r0, r6
 8006432:	6060      	str	r0, [r4, #4]
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	2300      	movs	r3, #0
 800643a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800643e:	e7aa      	b.n	8006396 <_printf_i+0x146>
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	4632      	mov	r2, r6
 8006444:	4649      	mov	r1, r9
 8006446:	4640      	mov	r0, r8
 8006448:	47d0      	blx	sl
 800644a:	3001      	adds	r0, #1
 800644c:	d0ad      	beq.n	80063aa <_printf_i+0x15a>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	079b      	lsls	r3, r3, #30
 8006452:	d413      	bmi.n	800647c <_printf_i+0x22c>
 8006454:	68e0      	ldr	r0, [r4, #12]
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	4298      	cmp	r0, r3
 800645a:	bfb8      	it	lt
 800645c:	4618      	movlt	r0, r3
 800645e:	e7a6      	b.n	80063ae <_printf_i+0x15e>
 8006460:	2301      	movs	r3, #1
 8006462:	4632      	mov	r2, r6
 8006464:	4649      	mov	r1, r9
 8006466:	4640      	mov	r0, r8
 8006468:	47d0      	blx	sl
 800646a:	3001      	adds	r0, #1
 800646c:	d09d      	beq.n	80063aa <_printf_i+0x15a>
 800646e:	3501      	adds	r5, #1
 8006470:	68e3      	ldr	r3, [r4, #12]
 8006472:	9903      	ldr	r1, [sp, #12]
 8006474:	1a5b      	subs	r3, r3, r1
 8006476:	42ab      	cmp	r3, r5
 8006478:	dcf2      	bgt.n	8006460 <_printf_i+0x210>
 800647a:	e7eb      	b.n	8006454 <_printf_i+0x204>
 800647c:	2500      	movs	r5, #0
 800647e:	f104 0619 	add.w	r6, r4, #25
 8006482:	e7f5      	b.n	8006470 <_printf_i+0x220>
 8006484:	08006af9 	.word	0x08006af9
 8006488:	08006b0a 	.word	0x08006b0a

0800648c <__sflush_r>:
 800648c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	0716      	lsls	r6, r2, #28
 8006496:	4605      	mov	r5, r0
 8006498:	460c      	mov	r4, r1
 800649a:	d454      	bmi.n	8006546 <__sflush_r+0xba>
 800649c:	684b      	ldr	r3, [r1, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dc02      	bgt.n	80064a8 <__sflush_r+0x1c>
 80064a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dd48      	ble.n	800653a <__sflush_r+0xae>
 80064a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	d045      	beq.n	800653a <__sflush_r+0xae>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064b4:	682f      	ldr	r7, [r5, #0]
 80064b6:	6a21      	ldr	r1, [r4, #32]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	d030      	beq.n	800651e <__sflush_r+0x92>
 80064bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	0759      	lsls	r1, r3, #29
 80064c2:	d505      	bpl.n	80064d0 <__sflush_r+0x44>
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064ca:	b10b      	cbz	r3, 80064d0 <__sflush_r+0x44>
 80064cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064d4:	6a21      	ldr	r1, [r4, #32]
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b0      	blx	r6
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	d106      	bne.n	80064ee <__sflush_r+0x62>
 80064e0:	6829      	ldr	r1, [r5, #0]
 80064e2:	291d      	cmp	r1, #29
 80064e4:	d82b      	bhi.n	800653e <__sflush_r+0xb2>
 80064e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <__sflush_r+0x104>)
 80064e8:	40ca      	lsrs	r2, r1
 80064ea:	07d6      	lsls	r6, r2, #31
 80064ec:	d527      	bpl.n	800653e <__sflush_r+0xb2>
 80064ee:	2200      	movs	r2, #0
 80064f0:	6062      	str	r2, [r4, #4]
 80064f2:	04d9      	lsls	r1, r3, #19
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	d504      	bpl.n	8006504 <__sflush_r+0x78>
 80064fa:	1c42      	adds	r2, r0, #1
 80064fc:	d101      	bne.n	8006502 <__sflush_r+0x76>
 80064fe:	682b      	ldr	r3, [r5, #0]
 8006500:	b903      	cbnz	r3, 8006504 <__sflush_r+0x78>
 8006502:	6560      	str	r0, [r4, #84]	@ 0x54
 8006504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006506:	602f      	str	r7, [r5, #0]
 8006508:	b1b9      	cbz	r1, 800653a <__sflush_r+0xae>
 800650a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800650e:	4299      	cmp	r1, r3
 8006510:	d002      	beq.n	8006518 <__sflush_r+0x8c>
 8006512:	4628      	mov	r0, r5
 8006514:	f000 fa24 	bl	8006960 <_free_r>
 8006518:	2300      	movs	r3, #0
 800651a:	6363      	str	r3, [r4, #52]	@ 0x34
 800651c:	e00d      	b.n	800653a <__sflush_r+0xae>
 800651e:	2301      	movs	r3, #1
 8006520:	4628      	mov	r0, r5
 8006522:	47b0      	blx	r6
 8006524:	4602      	mov	r2, r0
 8006526:	1c50      	adds	r0, r2, #1
 8006528:	d1c9      	bne.n	80064be <__sflush_r+0x32>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0c6      	beq.n	80064be <__sflush_r+0x32>
 8006530:	2b1d      	cmp	r3, #29
 8006532:	d001      	beq.n	8006538 <__sflush_r+0xac>
 8006534:	2b16      	cmp	r3, #22
 8006536:	d11e      	bne.n	8006576 <__sflush_r+0xea>
 8006538:	602f      	str	r7, [r5, #0]
 800653a:	2000      	movs	r0, #0
 800653c:	e022      	b.n	8006584 <__sflush_r+0xf8>
 800653e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006542:	b21b      	sxth	r3, r3
 8006544:	e01b      	b.n	800657e <__sflush_r+0xf2>
 8006546:	690f      	ldr	r7, [r1, #16]
 8006548:	2f00      	cmp	r7, #0
 800654a:	d0f6      	beq.n	800653a <__sflush_r+0xae>
 800654c:	0793      	lsls	r3, r2, #30
 800654e:	680e      	ldr	r6, [r1, #0]
 8006550:	bf08      	it	eq
 8006552:	694b      	ldreq	r3, [r1, #20]
 8006554:	600f      	str	r7, [r1, #0]
 8006556:	bf18      	it	ne
 8006558:	2300      	movne	r3, #0
 800655a:	eba6 0807 	sub.w	r8, r6, r7
 800655e:	608b      	str	r3, [r1, #8]
 8006560:	f1b8 0f00 	cmp.w	r8, #0
 8006564:	dde9      	ble.n	800653a <__sflush_r+0xae>
 8006566:	6a21      	ldr	r1, [r4, #32]
 8006568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800656a:	4643      	mov	r3, r8
 800656c:	463a      	mov	r2, r7
 800656e:	4628      	mov	r0, r5
 8006570:	47b0      	blx	r6
 8006572:	2800      	cmp	r0, #0
 8006574:	dc08      	bgt.n	8006588 <__sflush_r+0xfc>
 8006576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006588:	4407      	add	r7, r0
 800658a:	eba8 0800 	sub.w	r8, r8, r0
 800658e:	e7e7      	b.n	8006560 <__sflush_r+0xd4>
 8006590:	20400001 	.word	0x20400001

08006594 <_fflush_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	4605      	mov	r5, r0
 800659a:	460c      	mov	r4, r1
 800659c:	b913      	cbnz	r3, 80065a4 <_fflush_r+0x10>
 800659e:	2500      	movs	r5, #0
 80065a0:	4628      	mov	r0, r5
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	b118      	cbz	r0, 80065ae <_fflush_r+0x1a>
 80065a6:	6a03      	ldr	r3, [r0, #32]
 80065a8:	b90b      	cbnz	r3, 80065ae <_fflush_r+0x1a>
 80065aa:	f7ff fb17 	bl	8005bdc <__sinit>
 80065ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f3      	beq.n	800659e <_fflush_r+0xa>
 80065b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065b8:	07d0      	lsls	r0, r2, #31
 80065ba:	d404      	bmi.n	80065c6 <_fflush_r+0x32>
 80065bc:	0599      	lsls	r1, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_fflush_r+0x32>
 80065c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065c2:	f7ff fbe4 	bl	8005d8e <__retarget_lock_acquire_recursive>
 80065c6:	4628      	mov	r0, r5
 80065c8:	4621      	mov	r1, r4
 80065ca:	f7ff ff5f 	bl	800648c <__sflush_r>
 80065ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065d0:	07da      	lsls	r2, r3, #31
 80065d2:	4605      	mov	r5, r0
 80065d4:	d4e4      	bmi.n	80065a0 <_fflush_r+0xc>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	059b      	lsls	r3, r3, #22
 80065da:	d4e1      	bmi.n	80065a0 <_fflush_r+0xc>
 80065dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065de:	f7ff fbd7 	bl	8005d90 <__retarget_lock_release_recursive>
 80065e2:	e7dd      	b.n	80065a0 <_fflush_r+0xc>

080065e4 <__malloc_lock>:
 80065e4:	4801      	ldr	r0, [pc, #4]	@ (80065ec <__malloc_lock+0x8>)
 80065e6:	f7ff bbd2 	b.w	8005d8e <__retarget_lock_acquire_recursive>
 80065ea:	bf00      	nop
 80065ec:	20000314 	.word	0x20000314

080065f0 <__malloc_unlock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	@ (80065f8 <__malloc_unlock+0x8>)
 80065f2:	f7ff bbcd 	b.w	8005d90 <__retarget_lock_release_recursive>
 80065f6:	bf00      	nop
 80065f8:	20000314 	.word	0x20000314

080065fc <__sread>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	460c      	mov	r4, r1
 8006600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006604:	f000 f956 	bl	80068b4 <_read_r>
 8006608:	2800      	cmp	r0, #0
 800660a:	bfab      	itete	ge
 800660c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800660e:	89a3      	ldrhlt	r3, [r4, #12]
 8006610:	181b      	addge	r3, r3, r0
 8006612:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006616:	bfac      	ite	ge
 8006618:	6563      	strge	r3, [r4, #84]	@ 0x54
 800661a:	81a3      	strhlt	r3, [r4, #12]
 800661c:	bd10      	pop	{r4, pc}

0800661e <__swrite>:
 800661e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	461f      	mov	r7, r3
 8006624:	898b      	ldrh	r3, [r1, #12]
 8006626:	05db      	lsls	r3, r3, #23
 8006628:	4605      	mov	r5, r0
 800662a:	460c      	mov	r4, r1
 800662c:	4616      	mov	r6, r2
 800662e:	d505      	bpl.n	800663c <__swrite+0x1e>
 8006630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006634:	2302      	movs	r3, #2
 8006636:	2200      	movs	r2, #0
 8006638:	f000 f92a 	bl	8006890 <_lseek_r>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006642:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	4632      	mov	r2, r6
 800664a:	463b      	mov	r3, r7
 800664c:	4628      	mov	r0, r5
 800664e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006652:	f000 b951 	b.w	80068f8 <_write_r>

08006656 <__sseek>:
 8006656:	b510      	push	{r4, lr}
 8006658:	460c      	mov	r4, r1
 800665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665e:	f000 f917 	bl	8006890 <_lseek_r>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	bf15      	itete	ne
 8006668:	6560      	strne	r0, [r4, #84]	@ 0x54
 800666a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800666e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006672:	81a3      	strheq	r3, [r4, #12]
 8006674:	bf18      	it	ne
 8006676:	81a3      	strhne	r3, [r4, #12]
 8006678:	bd10      	pop	{r4, pc}

0800667a <__sclose>:
 800667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667e:	f000 b94d 	b.w	800691c <_close_r>

08006682 <__swbuf_r>:
 8006682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006684:	460e      	mov	r6, r1
 8006686:	4614      	mov	r4, r2
 8006688:	4605      	mov	r5, r0
 800668a:	b118      	cbz	r0, 8006694 <__swbuf_r+0x12>
 800668c:	6a03      	ldr	r3, [r0, #32]
 800668e:	b90b      	cbnz	r3, 8006694 <__swbuf_r+0x12>
 8006690:	f7ff faa4 	bl	8005bdc <__sinit>
 8006694:	69a3      	ldr	r3, [r4, #24]
 8006696:	60a3      	str	r3, [r4, #8]
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	071a      	lsls	r2, r3, #28
 800669c:	d501      	bpl.n	80066a2 <__swbuf_r+0x20>
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	b943      	cbnz	r3, 80066b4 <__swbuf_r+0x32>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 f82b 	bl	8006700 <__swsetup_r>
 80066aa:	b118      	cbz	r0, 80066b4 <__swbuf_r+0x32>
 80066ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80066b0:	4638      	mov	r0, r7
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	1a98      	subs	r0, r3, r2
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	b2f6      	uxtb	r6, r6
 80066be:	4283      	cmp	r3, r0
 80066c0:	4637      	mov	r7, r6
 80066c2:	dc05      	bgt.n	80066d0 <__swbuf_r+0x4e>
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7ff ff64 	bl	8006594 <_fflush_r>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d1ed      	bne.n	80066ac <__swbuf_r+0x2a>
 80066d0:	68a3      	ldr	r3, [r4, #8]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	60a3      	str	r3, [r4, #8]
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	6022      	str	r2, [r4, #0]
 80066dc:	701e      	strb	r6, [r3, #0]
 80066de:	6962      	ldr	r2, [r4, #20]
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d004      	beq.n	80066f0 <__swbuf_r+0x6e>
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	07db      	lsls	r3, r3, #31
 80066ea:	d5e1      	bpl.n	80066b0 <__swbuf_r+0x2e>
 80066ec:	2e0a      	cmp	r6, #10
 80066ee:	d1df      	bne.n	80066b0 <__swbuf_r+0x2e>
 80066f0:	4621      	mov	r1, r4
 80066f2:	4628      	mov	r0, r5
 80066f4:	f7ff ff4e 	bl	8006594 <_fflush_r>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d0d9      	beq.n	80066b0 <__swbuf_r+0x2e>
 80066fc:	e7d6      	b.n	80066ac <__swbuf_r+0x2a>
	...

08006700 <__swsetup_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4b29      	ldr	r3, [pc, #164]	@ (80067a8 <__swsetup_r+0xa8>)
 8006704:	4605      	mov	r5, r0
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	460c      	mov	r4, r1
 800670a:	b118      	cbz	r0, 8006714 <__swsetup_r+0x14>
 800670c:	6a03      	ldr	r3, [r0, #32]
 800670e:	b90b      	cbnz	r3, 8006714 <__swsetup_r+0x14>
 8006710:	f7ff fa64 	bl	8005bdc <__sinit>
 8006714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006718:	0719      	lsls	r1, r3, #28
 800671a:	d422      	bmi.n	8006762 <__swsetup_r+0x62>
 800671c:	06da      	lsls	r2, r3, #27
 800671e:	d407      	bmi.n	8006730 <__swsetup_r+0x30>
 8006720:	2209      	movs	r2, #9
 8006722:	602a      	str	r2, [r5, #0]
 8006724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006728:	81a3      	strh	r3, [r4, #12]
 800672a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800672e:	e033      	b.n	8006798 <__swsetup_r+0x98>
 8006730:	0758      	lsls	r0, r3, #29
 8006732:	d512      	bpl.n	800675a <__swsetup_r+0x5a>
 8006734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006736:	b141      	cbz	r1, 800674a <__swsetup_r+0x4a>
 8006738:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800673c:	4299      	cmp	r1, r3
 800673e:	d002      	beq.n	8006746 <__swsetup_r+0x46>
 8006740:	4628      	mov	r0, r5
 8006742:	f000 f90d 	bl	8006960 <_free_r>
 8006746:	2300      	movs	r3, #0
 8006748:	6363      	str	r3, [r4, #52]	@ 0x34
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	2300      	movs	r3, #0
 8006754:	6063      	str	r3, [r4, #4]
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	f043 0308 	orr.w	r3, r3, #8
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	b94b      	cbnz	r3, 800677a <__swsetup_r+0x7a>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800676c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006770:	d003      	beq.n	800677a <__swsetup_r+0x7a>
 8006772:	4621      	mov	r1, r4
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f83f 	bl	80067f8 <__smakebuf_r>
 800677a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677e:	f013 0201 	ands.w	r2, r3, #1
 8006782:	d00a      	beq.n	800679a <__swsetup_r+0x9a>
 8006784:	2200      	movs	r2, #0
 8006786:	60a2      	str	r2, [r4, #8]
 8006788:	6962      	ldr	r2, [r4, #20]
 800678a:	4252      	negs	r2, r2
 800678c:	61a2      	str	r2, [r4, #24]
 800678e:	6922      	ldr	r2, [r4, #16]
 8006790:	b942      	cbnz	r2, 80067a4 <__swsetup_r+0xa4>
 8006792:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006796:	d1c5      	bne.n	8006724 <__swsetup_r+0x24>
 8006798:	bd38      	pop	{r3, r4, r5, pc}
 800679a:	0799      	lsls	r1, r3, #30
 800679c:	bf58      	it	pl
 800679e:	6962      	ldrpl	r2, [r4, #20]
 80067a0:	60a2      	str	r2, [r4, #8]
 80067a2:	e7f4      	b.n	800678e <__swsetup_r+0x8e>
 80067a4:	2000      	movs	r0, #0
 80067a6:	e7f7      	b.n	8006798 <__swsetup_r+0x98>
 80067a8:	2000001c 	.word	0x2000001c

080067ac <__swhatbuf_r>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	460c      	mov	r4, r1
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	2900      	cmp	r1, #0
 80067b6:	b096      	sub	sp, #88	@ 0x58
 80067b8:	4615      	mov	r5, r2
 80067ba:	461e      	mov	r6, r3
 80067bc:	da0d      	bge.n	80067da <__swhatbuf_r+0x2e>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067c4:	f04f 0100 	mov.w	r1, #0
 80067c8:	bf14      	ite	ne
 80067ca:	2340      	movne	r3, #64	@ 0x40
 80067cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067d0:	2000      	movs	r0, #0
 80067d2:	6031      	str	r1, [r6, #0]
 80067d4:	602b      	str	r3, [r5, #0]
 80067d6:	b016      	add	sp, #88	@ 0x58
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
 80067da:	466a      	mov	r2, sp
 80067dc:	f000 f8ae 	bl	800693c <_fstat_r>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	dbec      	blt.n	80067be <__swhatbuf_r+0x12>
 80067e4:	9901      	ldr	r1, [sp, #4]
 80067e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067ee:	4259      	negs	r1, r3
 80067f0:	4159      	adcs	r1, r3
 80067f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067f6:	e7eb      	b.n	80067d0 <__swhatbuf_r+0x24>

080067f8 <__smakebuf_r>:
 80067f8:	898b      	ldrh	r3, [r1, #12]
 80067fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067fc:	079d      	lsls	r5, r3, #30
 80067fe:	4606      	mov	r6, r0
 8006800:	460c      	mov	r4, r1
 8006802:	d507      	bpl.n	8006814 <__smakebuf_r+0x1c>
 8006804:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	2301      	movs	r3, #1
 800680e:	6163      	str	r3, [r4, #20]
 8006810:	b003      	add	sp, #12
 8006812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006814:	ab01      	add	r3, sp, #4
 8006816:	466a      	mov	r2, sp
 8006818:	f7ff ffc8 	bl	80067ac <__swhatbuf_r>
 800681c:	9f00      	ldr	r7, [sp, #0]
 800681e:	4605      	mov	r5, r0
 8006820:	4639      	mov	r1, r7
 8006822:	4630      	mov	r0, r6
 8006824:	f7ff fc26 	bl	8006074 <_malloc_r>
 8006828:	b948      	cbnz	r0, 800683e <__smakebuf_r+0x46>
 800682a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682e:	059a      	lsls	r2, r3, #22
 8006830:	d4ee      	bmi.n	8006810 <__smakebuf_r+0x18>
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	f043 0302 	orr.w	r3, r3, #2
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	e7e2      	b.n	8006804 <__smakebuf_r+0xc>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	6020      	str	r0, [r4, #0]
 8006842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	9b01      	ldr	r3, [sp, #4]
 800684a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800684e:	b15b      	cbz	r3, 8006868 <__smakebuf_r+0x70>
 8006850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006854:	4630      	mov	r0, r6
 8006856:	f000 f80b 	bl	8006870 <_isatty_r>
 800685a:	b128      	cbz	r0, 8006868 <__smakebuf_r+0x70>
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	81a3      	strh	r3, [r4, #12]
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	431d      	orrs	r5, r3
 800686c:	81a5      	strh	r5, [r4, #12]
 800686e:	e7cf      	b.n	8006810 <__smakebuf_r+0x18>

08006870 <_isatty_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d06      	ldr	r5, [pc, #24]	@ (800688c <_isatty_r+0x1c>)
 8006874:	2300      	movs	r3, #0
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fa fd3f 	bl	80012fe <_isatty>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_isatty_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_isatty_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20000320 	.word	0x20000320

08006890 <_lseek_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d07      	ldr	r5, [pc, #28]	@ (80068b0 <_lseek_r+0x20>)
 8006894:	4604      	mov	r4, r0
 8006896:	4608      	mov	r0, r1
 8006898:	4611      	mov	r1, r2
 800689a:	2200      	movs	r2, #0
 800689c:	602a      	str	r2, [r5, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7fa fd38 	bl	8001314 <_lseek>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_lseek_r+0x1e>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_lseek_r+0x1e>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20000320 	.word	0x20000320

080068b4 <_read_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	@ (80068d4 <_read_r+0x20>)
 80068b8:	4604      	mov	r4, r0
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fa fcc6 	bl	8001254 <_read>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_read_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_read_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20000320 	.word	0x20000320

080068d8 <_sbrk_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d06      	ldr	r5, [pc, #24]	@ (80068f4 <_sbrk_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fa fd24 	bl	8001330 <_sbrk>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_sbrk_r+0x1a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_sbrk_r+0x1a>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20000320 	.word	0x20000320

080068f8 <_write_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	@ (8006918 <_write_r+0x20>)
 80068fc:	4604      	mov	r4, r0
 80068fe:	4608      	mov	r0, r1
 8006900:	4611      	mov	r1, r2
 8006902:	2200      	movs	r2, #0
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f7fa fcc1 	bl	800128e <_write>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_write_r+0x1e>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_write_r+0x1e>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	20000320 	.word	0x20000320

0800691c <_close_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d06      	ldr	r5, [pc, #24]	@ (8006938 <_close_r+0x1c>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	f7fa fccd 	bl	80012c6 <_close>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_close_r+0x1a>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_close_r+0x1a>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	20000320 	.word	0x20000320

0800693c <_fstat_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d07      	ldr	r5, [pc, #28]	@ (800695c <_fstat_r+0x20>)
 8006940:	2300      	movs	r3, #0
 8006942:	4604      	mov	r4, r0
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	f7fa fcc8 	bl	80012de <_fstat>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d102      	bne.n	8006958 <_fstat_r+0x1c>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	b103      	cbz	r3, 8006958 <_fstat_r+0x1c>
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	bd38      	pop	{r3, r4, r5, pc}
 800695a:	bf00      	nop
 800695c:	20000320 	.word	0x20000320

08006960 <_free_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4605      	mov	r5, r0
 8006964:	2900      	cmp	r1, #0
 8006966:	d041      	beq.n	80069ec <_free_r+0x8c>
 8006968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800696c:	1f0c      	subs	r4, r1, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfb8      	it	lt
 8006972:	18e4      	addlt	r4, r4, r3
 8006974:	f7ff fe36 	bl	80065e4 <__malloc_lock>
 8006978:	4a1d      	ldr	r2, [pc, #116]	@ (80069f0 <_free_r+0x90>)
 800697a:	6813      	ldr	r3, [r2, #0]
 800697c:	b933      	cbnz	r3, 800698c <_free_r+0x2c>
 800697e:	6063      	str	r3, [r4, #4]
 8006980:	6014      	str	r4, [r2, #0]
 8006982:	4628      	mov	r0, r5
 8006984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006988:	f7ff be32 	b.w	80065f0 <__malloc_unlock>
 800698c:	42a3      	cmp	r3, r4
 800698e:	d908      	bls.n	80069a2 <_free_r+0x42>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	1821      	adds	r1, r4, r0
 8006994:	428b      	cmp	r3, r1
 8006996:	bf01      	itttt	eq
 8006998:	6819      	ldreq	r1, [r3, #0]
 800699a:	685b      	ldreq	r3, [r3, #4]
 800699c:	1809      	addeq	r1, r1, r0
 800699e:	6021      	streq	r1, [r4, #0]
 80069a0:	e7ed      	b.n	800697e <_free_r+0x1e>
 80069a2:	461a      	mov	r2, r3
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	b10b      	cbz	r3, 80069ac <_free_r+0x4c>
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d9fa      	bls.n	80069a2 <_free_r+0x42>
 80069ac:	6811      	ldr	r1, [r2, #0]
 80069ae:	1850      	adds	r0, r2, r1
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	d10b      	bne.n	80069cc <_free_r+0x6c>
 80069b4:	6820      	ldr	r0, [r4, #0]
 80069b6:	4401      	add	r1, r0
 80069b8:	1850      	adds	r0, r2, r1
 80069ba:	4283      	cmp	r3, r0
 80069bc:	6011      	str	r1, [r2, #0]
 80069be:	d1e0      	bne.n	8006982 <_free_r+0x22>
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	6053      	str	r3, [r2, #4]
 80069c6:	4408      	add	r0, r1
 80069c8:	6010      	str	r0, [r2, #0]
 80069ca:	e7da      	b.n	8006982 <_free_r+0x22>
 80069cc:	d902      	bls.n	80069d4 <_free_r+0x74>
 80069ce:	230c      	movs	r3, #12
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	e7d6      	b.n	8006982 <_free_r+0x22>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	1821      	adds	r1, r4, r0
 80069d8:	428b      	cmp	r3, r1
 80069da:	bf04      	itt	eq
 80069dc:	6819      	ldreq	r1, [r3, #0]
 80069de:	685b      	ldreq	r3, [r3, #4]
 80069e0:	6063      	str	r3, [r4, #4]
 80069e2:	bf04      	itt	eq
 80069e4:	1809      	addeq	r1, r1, r0
 80069e6:	6021      	streq	r1, [r4, #0]
 80069e8:	6054      	str	r4, [r2, #4]
 80069ea:	e7ca      	b.n	8006982 <_free_r+0x22>
 80069ec:	bd38      	pop	{r3, r4, r5, pc}
 80069ee:	bf00      	nop
 80069f0:	2000031c 	.word	0x2000031c

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
